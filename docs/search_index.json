[
["index.html", "Bayesian Psychometric Modeling (2016) by Roy Levy and Robert J. Mislevy Chapter 1 Getting Started/Overview Chapter", " Bayesian Psychometric Modeling (2016) by Roy Levy and Robert J. Mislevy R. Noah Padgett 2020-10-23 Chapter 1 Getting Started/Overview Chapter This online book is meant to serve a computation reference for the text Bayesian Psychometric Modeling by Roy Levy and Robert Mislevy. I hope that having a detailed computation guide using Stan is of interest to someone. To reference the book, I will frequently use BPM as a shorthand for the title of the text. Throughout this book, I have incorporated elaborations on the code to help set up the examples and provide more details when possible. The authors provided an accompanying website, where the examples are shown using WinBUGS and Netica. The later is used in Chapter 14 for estimation of Bayesian networks. I wanted to deeply dive into this text so rerunning all the examples in a different language provides an excellent excuse to do so. Also, since I can go into more detail in this format than they could, I have not restricted myself by cutting short of the analysis. Meaning that I have done my best to fully (or sufficient for the example) analyze the posteriors to see what issues may pop up and how I resolved them. "],
["software.html", "1.1 Software", " 1.1 Software We have used R to call Stan. So we have relied on rstan heavily. NEED TO UPDATE - NEEDS A LOT MORE INFORMATION "],
["overview-of-assessment-and-psychometric-modeling.html", "1.2 Overview of Assessment and Psychometric Modeling", " 1.2 Overview of Assessment and Psychometric Modeling Chapter 1 of BPM provided an excellent overview of topics related to psychometric modeling. I wanted to highlight some particularly important pieces to keep in mind while modeling. “[We] view assessment as an instance of evidentiary reasoning.” (p. 3) This idea forms the basis for this text. Providing evidence in support of inferences, claims, decisions, etc. is a major stance of the probabilistic modeling used by Levy and MisLevy. Observed data provide some evidence, but not all data is evidence. This gets to their point that data are grounds to help provide evidence, but they also recognize that evidence does not depend solely on data. What these data represents is a major factor in helping to decide whether evidence has been gathered. Inferences depends on the data and the claim being made. They used excellent examples of the relationships between data, claims, and potential alternative explanations. These examples on pages 5-9 should be read. In summary, the idea is to use our claim to make predictions about what data we should observe. However, we have to use data to make inferences about our claims. The reversal is in line with the relationship between deductive reasoning and inductive reasoning. “A models is a simplified version of a real world scenario, wherein [relevant] features of the problem at hand are represented, while [less relevant features] are suppressed.” They took that stance that they acknowledge that any model they come up with is wrong, but they aim to develop a useful model to help solve a problem at hand. The models they are developing help describe the world according to the analyst. The according to analyst is important since this implies that the analyst is in control of how the model represents the world. The inclusion of the analyst as an active participant in the model building process instead of a passive observer is a realistic representation of the problem of assessment and modeling building. They highlighed 3 goals of modeling (p. 11) “represent the relationships among the relevant entities”; “provide the machinery for making inferences about what is unknown based on what is known”; and “offers machanisms for effectively communicating results to take actions in the real world.” Probability is interpreted as an approach to describing uncertainty about beliefs. This is called the epistemic interpretation of probability. Traditionally, probability in assessment has been interpreted in the frequency of an event. For example, if you flip a coin 100 times we could use a probability of 0.5 to represents the proportion of times the coin would land on heads. This would lead us to expect the number heads to occur to be approximately 50. In the epistemic interpretation, we could describe that we believe that the coin is fair meaning would would place equal weight to heads and tails when flipped. However, if we had a belief that the coin favors heads we could reflect this in the probability we assign to each event. This epistemic interpretation aligns with (1) above where we aim to provide evidence through assessment. Context of assessment should be incorporated into modeling whenever possible. Context (when, where, how long, how much, with whom, etc.) should be considered (at least) as part of the assessment and included in modeling/decision making. Without such details, the analyst may overlook an important consideration in making a decision. Evidence-Centered Design A framework for describing assessments and the context around the assessment. Three properties of ECD are helps us understand the argumentation behind the use of particular psychometric models; helps us through the assessment development process that might lead to such models; and does not require the use of such models. "],
["looking-forward.html", "1.3 Looking Forward", " 1.3 Looking Forward The remainder of this online accompanying text to BPM is organized as follows. Chapters 2-6 round of the Foundational information which includes a introduction of Bayesian inference (Chp 2), a discussion of the conceptual issues in Bayesian inferences (chp 3), a dive into normal distribution models (chp 4), a near 50,000 ft view of estimation with markov chain Monte Carlo (MCMC, chp 5), and introducing notation for regression modeling (chp 6). Next, we turn our attention to the meat of the book with section 2 which is the remainder of the text, chapters 7-14. These chapters move from basic psychometric modeling (chp 7) to classical test theory (chp 8), factor analysis (chp 9), item response theory (chp 11), latent class analysis (chp 13), and networks (chp 14). Other modeling issues and topics are discussed such as model comparison (chp 10) and missing data (chp 12). Throughout all these chapters I will go through all the example analyses using Stan instead of WinBUGS so that potential differences can be compared and discussed. "],
["chp2.html", "Chapter 2 Introduction to Bayesian Inference", " Chapter 2 Introduction to Bayesian Inference Chapter 2 is focused on introducing the fundamentals of Bayesian modeling. I will briefly reiterate some of these concepts, but Levy and Mislevy did an excellent job introducing the basic concepts so I defer to them. A few points I would like to highlight are The concept of likelihood is fundamental to Bayesian methods and frequentist methods as well. The likelihood function (denoted \\(p(\\mathbf{x} \\mid \\theta)\\) or equivalently \\(L(\\theta \\mid \\mathbf{x})\\)) is fundamental as this conditional probability describes our beliefs about the data generating process. Another way of thinking about the likelihood function is as the data model. The data model decribes how parameters of interest relates to the observed data. This key concept is used in frequentist methods (e.g., maximum likelihood estimation) to obtain point estimates of model parameters. A fundamental difference between maximum likelihood and Bayesian estimation is how we use the likelihood function to construct interval estimates of parameters (see next point). Interval estimates in Bayesian methods do not rely on the idea of repeated sampling. In frequentist analyses, the construction of interval estimates around maximum likelihood estimators is dependent on utilizing repeated sampling paradigm. The interval estimate around the MLE is referred to the sampling distribution of the parameter estimator. BPM discusses these features of maximum likelihood well on p. 26. In Bayesian methods, an interval estimate is constructed based on the distribution of the parameter and not the parameter estimator. This distinction makes Bayesian intervals based on the likely values of the parameter based on our prior beliefs and observed data. Bayes Theorem Bayes theorem is the underlying engine of all Bayesian methods. We use Bayes theorm to decompose conditional probabilities so that they can work for us. As an analyst, we interested in the plausible values of the parameters based on the observed data. This can be expressed as a conditional probability (\\(p(\\theta \\mid \\mathbf{x})\\)). Bayes theorm states that \\[\\begin{equation} \\begin{split} p(\\theta \\mid \\mathbf{x}) &amp;= \\frac{p(\\mathbf{x}, \\theta)}{p(\\mathbf{x})}\\\\ &amp;= \\frac{p(\\mathbf{x}\\mid \\theta)p(\\theta)}{p(\\mathbf{x})}.\\\\ \\end{split} \\tag{2.1} \\end{equation}\\] The distinction between frequentist and Bayesian approaches is more than treating model parameters as random. A different way to stating the difference between frequentist and Bayesian approaches is based on what is being conditioned on to make inferences. In a classic frequentist hypothesis testing scenario, the model parameters are conditioned on to calculate the probability of the observed data (i.e., \\(\\mathrm{Pr}(data \\mid \\theta)\\)). This implies that the data are treated as random variables, but this does not exclude the fact the \\(\\theta\\) can be a collection of parameters that have random components (e.g., random intercepts in HLM). However, in a Bayesian model, the model parameters are the object of interest and the data are conditioned on (i.e., \\(\\mathrm{Pr}(\\theta \\mid data)\\)). This implies that the data are treated as a fixed entity that is used to construct inferences. This is how BPM related Bayesian inference to inductive reasoning. The inductive reasoning comes from taking observations and trying to making claims about the general. "],
["beta-binomial-example.html", "2.1 Beta-binomial Example", " 2.1 Beta-binomial Example Here I go through the the first example from BPM. The example is a relatively simple beta-binomial model. Which is a way of modeling the number of occurrences of a bernoulli process. For example, suppose we were interested in the number of times a coin landed on heads. Here, we have a set number of coin flips (say \\(J\\)) and we are interested in the number of times the coin landed on heads (call this outcome \\(y\\)). We can model this structure letting \\(y\\) be a binomial random variable which we can express this as \\[y\\sim\\mathrm{Binomial}(\\theta, J)\\] where \\(\\theta\\) is the probability of heads on any given coin toss. As part of the Bayesian modeling I need to specify my prior belief as to the likely values of \\(\\theta\\). The probability \\(\\theta\\) lies in the interval \\([0, 1]\\). A nice probability distribution on this range is the beta distribution. That is, I can model my belief as to the likely values of the probability of heads by saying that \\(\\theta\\) is beta distributed which can be expressed as \\[\\theta \\sim \\mathrm{Beta}(\\alpha,\\beta)\\]. The two parameters for the beta distribution are representative of the shape the distribution will take. When \\(\\alpha = \\beta\\) the distribution is symmetrical, and when \\(\\alpha = \\beta=1\\) the beta distribution is flat or uniform over \\([0,1]\\). When a distribution is uniform I mean that all values are equally likely over the range of possible values which can be described as having the belief that all values are equally plausible. This model can be represented in a couple different ways. One way is as a directed acyclic graph (DAG). A DAG representation is very similar to path models in general structural equation modeling. The directed nature of the diagram highlights how observed variables (e.g., \\(y\\)) are modeled by unknown parameters \\(\\theta\\). All observed or explicitly defined variables/values are in rectangles while any latent variable or model parameter are in circles. DAG representation of model for the beta-binomal model is Figure 2.1: Directed Acyclic Graph (DAG) for the beta-binomial model I have given an alternative DAG representation that includes all relevant details. In terms of a DAG, I prefer this representation as all the assumed model components are made explicit. However, in more complex models this approach will likely lead to very dense and possible unuseful representations. Figure 2.2: DAG with explicit representation for all beta-binomial model components Yet another alternative representation is what I call a model specification chart. This takes on a similar feel as a DAG in that the flow of model parameters can be shown, but with the major difference that I use the distributional notation explicitly. Figure 2.3: Model specification diagram for beta-binomial model I will stick with these last two representations as much as possible. 2.1.1 Computation using Stan Now, I’m finally getting to the analysis part. I have done my best to be descriptive of what the Stan code represents and how it works (in a general how to use this sense). I highly recommend a look at the example analysis by the development team to help see their approach as well (see here Stan analysis). model_beta_binomial &lt;- &#39; // data block needs to describe the variable // type (e.g., real, int, etc.) and the name // in the data object passed data { int J; int y; real alpha; real beta; } // parameters block needs to specify the // unknown parameters parameters { real&lt;lower=0, upper=1&gt;theta; } // model block needs to describe the data-model // and the prior specification model { y ~ binomial(J, theta); theta ~ beta(alpha, beta); } // there must be a blank line after all blocks &#39; # data must be in a list mydata &lt;- list( J = 10, y = 7, alpha = 6, beta = 6 ) # start values can be done automatically by stan or # done explicitly be the analyst (me). I prefer # to try to be explicit so that I can *try* to # guarantee that the initial chains start. # The values can be specified as a function # which lists the values to the respective # parameters start_values &lt;- function(){ list(theta = 0.5) } # Next, need to fit the model # I have explicited outlined some common parameters fit &lt;- stan( model_code = model_beta_binomial, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 4, # number of Markov chains warmup = 1000, # number of warmup iterations per chain iter = 2000, # total number of iterations per chain cores = 2, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): ## &#39;-E&#39; not found # first get a basic breakdown of the posteriors print(fit, pars=&quot;theta&quot;) ## Inference for Stan model: db495166b911389af4867f0120ac5e81. ## 4 chains, each with iter=2000; warmup=1000; thin=1; ## post-warmup draws per chain=1000, total post-warmup draws=4000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## theta 0.59 0 0.1 0.38 0.53 0.6 0.67 0.79 1420 1 ## ## Samples were drawn using NUTS(diag_e) at Fri Sep 11 11:11:59 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit, pars=&quot;theta&quot;) # traceplots rstan::traceplot(fit, pars = c(&quot;theta&quot;), inc_warmup = TRUE) # plot the posterior density posterior &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( posterior, pars = c(&quot;theta&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE MLE &lt;- 0.7 prior &lt;- function(x){dbeta(x, 6, 6)} x &lt;- seq(0, 1, 0.01) prior.dat &lt;- data.frame(X=x, dens = prior(x)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; ggplot()+ geom_density(data=as.data.frame(posterior), aes(x=theta, color=&quot;Posterior&quot;))+ geom_line(data=prior.dat, aes(x=x, y=dens, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE, color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) 2.1.2 Computation using WinBUGS (OpenBUGS) Here, I am simply contrasting the computation from Stan to how BPM describes the computations using WinBUGS. I have downloaded the .bug file from the text website and I will load it into R for viewing. First, let’s take a look at the model described by BPM on p. 39. # A model block model{ ################################# # Prior distribution ################################# theta ~ dbeta(alpha,beta) ################################# # Conditional distribution of the data ################################# y ~ dbin(theta, J) } # data statement list(J = 10, y = 7, alpha = 6, beta = 6) Next, we want to use the above model. Using OpensBUGS through R can be a little clunky as I had to create objects with the filepaths of the data and model code then get R to read those in through the function openbugs. Otherwise, the code is similar to style to the code used for calling Stan. # model code model.file &lt;- paste0(w.d,&quot;/code/Binomial/Binomial Model.bug&quot;) # get data file data.file &lt;- paste0(w.d,&quot;/code/Binomial/Binomial data.txt&quot;) # starting values start_values &lt;- function(){ list(theta=0.5) } # vector of all parameters to save param_save &lt;- c(&quot;theta&quot;) # fit model fit &lt;- openbugs( data= data.file, model.file = model.file, # R grabs the file and runs it in openBUGS parameters.to.save = param_save, inits=start_values, n.chains = 4, n.iter = 2000, n.burnin = 1000, n.thin = 1 ) ## Sampling has been started ... print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/Box/Research/Morgan-Padgett/Bayesian-Psychometric-Modeling/code/Binomial/Binomial Model.bug&quot;, fit using OpenBUGS, ## 4 chains, each with 2000 iterations (first 1000 discarded) ## n.sims = 4000 iterations saved ## mean sd 2.5% 25% 50% 75% 97.5% Rhat n.eff ## theta 0.6 0.1 0.4 0.5 0.6 0.7 0.8 1 1500 ## deviance 3.6 1.1 2.6 2.8 3.2 4.0 6.7 1 1600 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = Dbar-Dhat) ## pD = 0.4 and DIC = 4.0 ## DIC is an estimate of expected predictive error (lower deviance is better). posterior &lt;- fit$sims.matrix plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( posterior, pars = c(&quot;theta&quot;), prob = 0.8) + plot_title MLE &lt;- 0.7 prior &lt;- function(x){dbeta(x, 6, 6)} x &lt;- seq(0, 1, 0.01) prior.dat &lt;- data.frame(X=x, dens = prior(x)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; ggplot()+ geom_density(data=as.data.frame(posterior), aes(x=theta, color=&quot;Posterior&quot;))+ geom_line(data=prior.dat, aes(x=x, y=dens, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE, color=&quot;MLE&quot;))+ labs(title=&quot;Posterior density comparedto prior and MLE&quot;)+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) 2.1.3 Computation using JAGS (R2jags) Here, I utilize JAGS, which is nearly identical to WinBUGS in how the underlying mechanics work to compute the posterior but is easily to use through R. # model code jags.model &lt;- function(){ ################################# # Conditional distribution of the data ################################# y ~ dbin(theta, J) ################################# # Prior distribution ################################# theta ~ dbeta(alpha, beta) } # data mydata &lt;- list( J = 10, y = 7, alpha = 6, beta = 6 ) # starting values start_values &lt;- function(){ list(&quot;theta&quot;=0.5) } # vector of all parameters to save param_save &lt;- c(&quot;theta&quot;) # fit model fit &lt;- jags( model.file=jags.model, data=mydata, inits=start_values, parameters.to.save = param_save, n.iter=1000, n.burnin = 500, n.chains = 4, n.thin=1, progress.bar = &quot;none&quot;) ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 1 ## Unobserved stochastic nodes: 1 ## Total graph size: 5 ## ## Initializing model print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/AppData/Local/Temp/RtmpkVCUHW/model7fc662b72.txt&quot;, fit using jags, ## 4 chains, each with 1000 iterations (first 500 discarded) ## n.sims = 2000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## theta 0.592 0.100 0.393 0.526 0.594 0.662 0.782 1.003 870 ## deviance 3.547 1.096 2.643 2.766 3.157 3.919 6.495 1.002 1400 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = var(deviance)/2) ## pD = 0.6 and DIC = 4.1 ## DIC is an estimate of expected predictive error (lower deviance is better). # extract posteriors for all chains jags.mcmc &lt;- as.mcmc(fit) R2jags::traceplot(jags.mcmc) # convert to singel data.frame for density plot a &lt;- colnames(as.data.frame(jags.mcmc[[1]])) plot.data &lt;- data.frame(as.matrix(jags.mcmc, chains=T, iters = T)) colnames(plot.data) &lt;- c(&quot;chain&quot;, &quot;iter&quot;, a) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;theta&quot;), prob = 0.8) + plot_title MLE &lt;- 0.7 prior &lt;- function(x){dbeta(x, 6, 6)} x &lt;- seq(0, 1, 0.01) prior.dat &lt;- data.frame(X=x, dens = prior(x)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; ggplot()+ geom_density(data=plot.data, aes(x=theta, color=&quot;Posterior&quot;))+ geom_line(data=prior.dat, aes(x=x, y=dens, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE, color=&quot;MLE&quot;))+ labs(title=&quot;Posterior density comparedto prior and MLE&quot;)+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) "],
["beta-bernoulli-example.html", "2.2 Beta-Bernoulli Example", " 2.2 Beta-Bernoulli Example For this next example, I use the same data as the previous model. But now, instead of treating the individual events as part of a whole and sum over the successes, I will treat the model in a more hierarchical manner. A hierarchical model here simply implies that I’ll be using the same probability function for all individual observations. We express this by saying that the observations depend on the index (\\(j=1, 2, ..., J\\)) but that the parameter of interest does not vary across \\(j\\). Two DAG representations similar to the previous examples are shown below. The major difference in these representations from the previous example is the inclusion of a plate that represents the observations depend on the index \\(j\\). Figure 2.4: DAG for the beta-bernoulli model Figure 2.5: DAG with explicit representation for all beta-bernoulli model components In my favor representation, this model can be expressed as Figure 2.6: Model specification diagram for beta-bernoulli model We will use the same \\(\\mathrm{Beta}(\\alpha, \\beta)\\) prior for \\(\\theta\\) as in the previous example. The model code changes to the following, 2.2.1 Computation using Stan model_beta_bernoulli &lt;- &#39; // data block needs to describe the variable // type (e.g., real, int, etc.) and the name // in the data object passed data { int J; int y[J]; //declare observations as an integer vector of length J real alpha; real beta; } // parameters block needs to specify the // unknown parameters parameters { real&lt;lower=0, upper=1&gt;theta; } // model block needs to describe the data-model // and the prior specification model { for(j in 1:J){ y[j] ~ bernoulli(theta); } theta ~ beta(alpha, beta); } // there must be a blank line after all blocks &#39; # data must be in a list mydata &lt;- list( J = 10, y = c(1,0,1,1,0,0,1,1,1,1), alpha = 6, beta = 6 ) # start values can be done automatically by stan or # done explicitly be the analyst (me). I prefer # to try to be explicit so that I can *try* to # guarantee that the initial chains start. # The values can be specified as a function # which lists the values to the respective # parameters start_values &lt;- function(){ list(theta = 0.5) } # Next, need to fit the model # I have explicited outlined some common parameters fit &lt;- stan( model_code = model_beta_bernoulli, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 4, # number of Markov chains warmup = 1000, # number of warmup iterations per chain iter = 2000, # total number of iterations per chain cores = 2, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): ## &#39;-E&#39; not found # first get a basic breakdown of the posteriors print(fit, pars=&quot;theta&quot;) ## Inference for Stan model: 7a99cbb09826cf6efe5d323426433fa9. ## 4 chains, each with iter=2000; warmup=1000; thin=1; ## post-warmup draws per chain=1000, total post-warmup draws=4000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## theta 0.59 0 0.1 0.38 0.52 0.59 0.67 0.79 1219 1 ## ## Samples were drawn using NUTS(diag_e) at Fri Sep 18 10:04:10 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit, pars=&quot;theta&quot;) # traceplots rstan::traceplot(fit, pars = c(&quot;theta&quot;), inc_warmup = TRUE) # plot the posterior density posterior &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( posterior, pars = c(&quot;theta&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE MLE &lt;- 0.7 prior &lt;- function(x){dbeta(x, 6, 6)} x &lt;- seq(0, 1, 0.01) prior.dat &lt;- data.frame(X=x, dens = prior(x)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; ggplot()+ geom_density(data=as.data.frame(posterior), aes(x=theta, color=&quot;Posterior&quot;))+ geom_line(data=prior.dat, aes(x=x, y=dens, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE, color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) 2.2.2 Computation using WinBUGS (OpenBUGS) Here, I am simply contrasting the computation from Stan to how BPM describes the computations using WinBUGS. First, let’s take a look at the model described by BPM on p. 41. # A model block model{ ################################# # Prior distribution ################################# theta ~ dbeta(alpha,beta) ################################# # Conditional distribution of the data ################################# for(j in 1:J){ y[j] ~ dbern(theta) } } # data statement list(J=10, y=c(1,0,1,0,1,1,1,1,0,1), alpha=6, beta=6) The code is similar to style to the code used for calling Stan. However you’ll notice a difference in how a probability distribution is referenced. # model code model.file &lt;- paste0(w.d,&quot;/code/Bernoulli/Bernoulli Model.bug&quot;) # get data file data.file &lt;- paste0(w.d,&quot;/code/Bernoulli/Bernoulli data.txt&quot;) # starting values start_values &lt;- function(){ list(theta=0.5) } # vector of all parameters to save param_save &lt;- c(&quot;theta&quot;) # fit model fit &lt;- openbugs( data= data.file, model.file = model.file, # R grabs the file and runs it in openBUGS parameters.to.save = param_save, inits=start_values, n.chains = 4, n.iter = 2000, n.burnin = 1000, n.thin = 1 ) ## Sampling has been started ... print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/Box/Research/Morgan-Padgett/Bayesian-Psychometric-Modeling/code/Bernoulli/Bernoulli Model.bug&quot;, fit using OpenBUGS, ## 4 chains, each with 2000 iterations (first 1000 discarded) ## n.sims = 4000 iterations saved ## mean sd 2.5% 25% 50% 75% 97.5% Rhat n.eff ## theta 0.6 0.1 0.4 0.5 0.6 0.7 0.8 1 1500 ## deviance 13.2 1.1 12.2 12.3 12.7 13.5 16.3 1 1600 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = Dbar-Dhat) ## pD = 0.4 and DIC = 13.6 ## DIC is an estimate of expected predictive error (lower deviance is better). posterior &lt;- fit$sims.matrix plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( posterior, pars = c(&quot;theta&quot;), prob = 0.8) + plot_title MLE &lt;- 0.7 prior &lt;- function(x){dbeta(x, 6, 6)} x &lt;- seq(0, 1, 0.01) prior.dat &lt;- data.frame(X=x, dens = prior(x)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; ggplot()+ geom_density(data=as.data.frame(posterior), aes(x=theta, color=&quot;Posterior&quot;))+ geom_line(data=prior.dat, aes(x=x, y=dens, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE, color=&quot;MLE&quot;))+ labs(title=&quot;Posterior density comparedto prior and MLE&quot;)+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) 2.2.3 Computation using JAGS (R2jags) Here, I utilize JAGS, which is nearly identical to WinBUGS in how the underlying mechanics work to compute the posterior but is easily to use through R. # model code jags.model &lt;- function(){ ################################# # Conditional distribution of the data ################################# for(j in 1:J){ y[j] ~ dbern(theta) } ################################# # Prior distribution ################################# theta ~ dbeta(alpha,beta) } # data mydata &lt;- list( J = 10, y = c(1,0,1,1,0,0,1,NA,1,1), alpha = 6, beta = 6 ) # starting values start_values &lt;- function(){ list(&quot;theta&quot;=0.5) } # vector of all parameters to save param_save &lt;- c(&quot;theta&quot;) # fit model fit &lt;- jags( model.file=jags.model, data=mydata, inits=start_values, parameters.to.save = param_save, n.iter=1000, n.burnin = 500, n.chains = 4, n.thin=1, progress.bar = &quot;none&quot;) ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 9 ## Unobserved stochastic nodes: 2 ## Total graph size: 14 ## ## Initializing model print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/AppData/Local/Temp/RtmpkVCUHW/model7fc47272ed0.txt&quot;, fit using jags, ## 4 chains, each with 1000 iterations (first 500 discarded) ## n.sims = 2000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## theta 0.570 0.106 0.356 0.496 0.572 0.646 0.770 1.001 1900 ## deviance 12.229 0.958 11.458 11.549 11.866 12.550 15.029 1.001 2000 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = var(deviance)/2) ## pD = 0.5 and DIC = 12.7 ## DIC is an estimate of expected predictive error (lower deviance is better). # extract posteriors for all chains jags.mcmc &lt;- as.mcmc(fit) R2jags::traceplot(jags.mcmc) # convert to singel data.frame for density plot a &lt;- colnames(as.data.frame(jags.mcmc[[1]])) plot.data &lt;- data.frame(as.matrix(jags.mcmc, chains=T, iters = T)) colnames(plot.data) &lt;- c(&quot;chain&quot;, &quot;iter&quot;, a) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;theta&quot;), prob = 0.8) + plot_title MLE &lt;- 0.7 prior &lt;- function(x){dbeta(x, 6, 6)} x &lt;- seq(0, 1, 0.01) prior.dat &lt;- data.frame(X=x, dens = prior(x)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; ggplot()+ geom_density(data=plot.data, aes(x=theta, color=&quot;Posterior&quot;))+ geom_line(data=prior.dat, aes(x=x, y=dens, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE, color=&quot;MLE&quot;))+ labs(title=&quot;Posterior density comparedto prior and MLE&quot;)+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) "],
["conceptual-issues-in-bayesian-inference.html", "Chapter 3 Conceptual Issues in Bayesian Inference", " Chapter 3 Conceptual Issues in Bayesian Inference This chapter was conceptual so there was no code. "],
["normal-distribution-models.html", "Chapter 4 Normal Distribution Models", " Chapter 4 Normal Distribution Models This chapter was mainly analytic derivations, but there was one section that did code so I show that in JAGS and Stan. "],
["stan-model-for-mean-and-variance-unknown.html", "4.1 Stan Model for mean and variance unknown", " 4.1 Stan Model for mean and variance unknown The model for mean and variance unknown for normal sampling. Figure 4.1: DAG with for mean and variance unknown: Variance parameterization Or, alternatively, Figure 4.2: Model specification diagram for normal model model_normal &lt;- &#39; data { int N; real x[N]; real mu0; real sigma0; real alpha0; real beta0; } parameters { real mu; real&lt;lower=0&gt; sigma; } model { x ~ normal(mu, sigma); mu ~ normal(mu0, sigma0); sigma ~ inv_gamma(alpha0, beta0); } &#39; # data must be in a list mydata &lt;- list( N = 10, x=c(91, 85, 72, 87, 71, 77, 88, 94, 84, 92), mu0 = 75, sigma0 = 50, alpha0 = 5, beta0 = 150 ) # start values start_values &lt;- function(){ list(mu=50, sigma=5) } # Next, need to fit the model # I have explicited outlined some common parameters fit &lt;- stan( model_code = model_normal, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 4, # number of Markov chains warmup = 1000, # number of warm up iterations per chain iter = 5000, # total number of iterations per chain cores = 2, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): ## &#39;-E&#39; not found # first get a basic breakdown of the posteriors print(fit) ## Inference for Stan model: 682d92f82066fa7e19436da3c3fccc69. ## 4 chains, each with iter=5000; warmup=1000; thin=1; ## post-warmup draws per chain=4000, total post-warmup draws=16000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## mu 84.00 0.05 4.83 74.12 81.00 84.10 87.05 93.42 8165 1 ## sigma 14.84 0.04 3.86 9.28 12.16 14.16 16.82 24.16 7951 1 ## lp__ -52.88 0.01 1.07 -55.76 -53.30 -52.56 -52.11 -51.83 5327 1 ## ## Samples were drawn using NUTS(diag_e) at Fri Sep 18 10:13:44 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit) ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot(fit, pars = c(&quot;mu&quot;, &quot;sigma&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion ggs_grb(ggs(fit)) + theme_bw() + theme(panel.grid = element_blank()) # autocorrelation ggs_autocorrelation(ggs(fit)) + theme_bw() + theme(panel.grid = element_blank()) # plot the posterior density posterior &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( posterior, pars = c(&quot;mu&quot;, &quot;sigma&quot;), prob = 0.8) + plot_title # bivariate plot posterior &lt;- as.data.frame(posterior) p &lt;- ggplot(posterior, aes(x=mu, y=sigma))+ geom_point()+ theme_bw()+ theme(panel.grid = element_blank()) p # I prefer a posterior plot that includes prior and MLE MLE &lt;- c(mean(mydata$x), sd(mydata$x)) prior_mu &lt;- function(x){dnorm(x, 75, 50)} x.mu &lt;- seq(60.01, 120, 0.01) prior.mu &lt;- data.frame(mu=x.mu, dens.mu = prior_mu(x.mu)) prior_sig &lt;- function(x){extraDistr::dinvgamma(x, 5, 150)} x.sig &lt;- seq(0.01, 60, 0.01) prior.sig &lt;- data.frame(sigma=x.sig, dens.sig = prior_sig(x.sig)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; p1 &lt;- ggplot()+ geom_density(data=posterior, aes(x=mu, color=&quot;Posterior&quot;))+ geom_line(data=prior.mu, aes(x=x.mu, y=dens.mu, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=posterior, aes(x=sigma, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sigma, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + plot_layout(guides=&quot;collect&quot;) "],
["jags-model-for-mean-and-variance-unknown-precision-parameterization.html", "4.2 JAGS Model for mean and variance unknown (precision parameterization)", " 4.2 JAGS Model for mean and variance unknown (precision parameterization) The model for mean and variance unknown for normal sampling. Figure 4.3: DAG with for mean and variance unknown: Precision parameterization Or, alternatively, Figure 4.4: Model specification diagram for normal model with precision parameterization Now for the computation using JAGS # model code jags.model &lt;- function(){ ############################################# # Conditional distribution for the data ############################################# for(i in 1:n){ x[i] ~ dnorm(mu, tau) # conditional distribution of the data } # closes loop over subjects ############################################# # Define the prior distributions for the unknown parameters # The mean of the data (mu) # The variance (sigma.squared) and precision (tau) of the data ############################################# mu ~ dnorm(mu.mu, tau.mu) # prior distribution for mu mu.mu &lt;- 75 # mean of the prior for mu sigma.squared.mu &lt;- 50 # variance of the prior for mu tau.mu &lt;- 1/sigma.squared.mu # precision of the prior for mu tau ~ dgamma(alpha, beta) # precision of the data sigma.squared &lt;- 1/tau # variance of the data sigma &lt;- pow(sigma.squared, 0.5) # taking square root nu.0 &lt;- 10 # hyperparameter for prior for tau sigma.squared.0 &lt;- 30 # hyperparameter for prior for tau alpha &lt;- nu.0/2 # hyperparameter for prior for tau beta &lt;- nu.0*sigma.squared.0/2 # hyperparameter for prior for tau } # data mydata &lt;- list( n=10, x=c(91, 85, 72, 87, 71, 77, 88, 94, 84, 92)) # starting values start_values &lt;- function(){ list(&quot;mu&quot;=75, &quot;tau&quot;=0.1) } # vector of all parameters to save param_save &lt;- c(&quot;mu&quot;, &quot;tau&quot;, &quot;sigma&quot;) # fit model fit &lt;- jags( model.file=jags.model, data=mydata, inits=start_values, parameters.to.save = param_save, n.iter=4000, n.burnin = 1000, n.chains = 4, n.thin=1, progress.bar = &quot;none&quot;) ## module glm loaded ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 10 ## Unobserved stochastic nodes: 2 ## Total graph size: 26 ## ## Initializing model print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/AppData/Local/Temp/RtmpmAkVWG/model3e08768a69a1.txt&quot;, fit using jags, ## 4 chains, each with 4000 iterations (first 1000 discarded) ## n.sims = 12000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## mu 83.253 2.225 78.720 81.811 83.295 84.735 87.512 1.001 10000 ## sigma 7.194 1.241 5.238 6.311 7.036 7.881 10.101 1.001 5700 ## tau 0.021 0.007 0.010 0.016 0.020 0.025 0.036 1.001 5700 ## deviance 71.222 1.872 69.381 69.892 70.666 71.963 76.152 1.001 4800 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = var(deviance)/2) ## pD = 1.8 and DIC = 73.0 ## DIC is an estimate of expected predictive error (lower deviance is better). # extract posteriors for all chains jags.mcmc &lt;- as.mcmc(fit) R2jags::traceplot(jags.mcmc) # gelman-rubin-brook gelman.plot(jags.mcmc) # convert to single data.frame for density plot a &lt;- colnames(as.data.frame(jags.mcmc[[1]])) plot.data &lt;- data.frame(as.matrix(jags.mcmc, chains=T, iters = T)) colnames(plot.data) &lt;- c(&quot;chain&quot;, &quot;iter&quot;, a) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;mu&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(&quot;tau&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(&quot;sigma&quot;), prob = 0.8) + plot_title # bivariate plot p &lt;- ggplot(plot.data, aes(x=mu, y=tau))+ geom_point()+ theme_bw()+ theme(panel.grid = element_blank()) p # I prefer a posterior plot that includes prior and MLE MLE &lt;- c(mean(mydata$x), 1/var(mydata$x)) prior_mu &lt;- function(x){dnorm(x, 75, 50)} x.mu &lt;- seq(70.01, 100, 0.01) prior.mu &lt;- data.frame(mu=x.mu, dens.mu = prior_mu(x.mu)) prior_tau &lt;- function(x){dgamma(x, 5, 150)} x.tau &lt;- seq(0.0001, 0.06, 0.0001) prior.tau &lt;- data.frame(tau=x.tau, dens.tau = prior_tau(x.tau)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=mu, color=&quot;Posterior&quot;))+ geom_line(data=prior.mu, aes(x=x.mu, y=dens.mu, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=tau, color=&quot;Posterior&quot;))+ geom_line(data=prior.tau, aes(x=tau, y=dens.tau, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + plot_layout(guides=&quot;collect&quot;) "],
["markov-chain-monte-carlo-estimation.html", "Chapter 5 Markov Chain Monte Carlo Estimation", " Chapter 5 Markov Chain Monte Carlo Estimation This chapter on MCMC methods gives an introduction to some of the common and basic sampling approaches for Bayesian methods. These methods in Gibbs Sampling Metropolis Sampling Metropolis-Hastings and some notes on how these approaches are related. The most important take away for me was their section on practical issues in MCMC methods. These practical aspects of estimation that should be noted are: Assessing convergence - making sure enough iterations have been used including the potential scale reduction factor (\\(\\hat{R}\\)), Serial dependence - where the samples drawn from the posterior are autocorrelated. This means that within a chain the draws are dependent but with enough draws and thinning all samples are sufficiently independent, Mixing - that different chains search/sample from the same parameter space but different chains can sometimes get “stuck” sampling one part of the parameter space that is not the same as the other chains. Lastly, a major take away from this chapter is that MCMC methods help to approximate the posterior distribution. The distribution is the solution of a full Bayesian analysis and not a point estimate. "],
["regression.html", "Chapter 6 Regression", " Chapter 6 Regression For the regression models, we have built up what the DAG could look like. These representations are shown below. Figure 6.1: DAG a simple regression model with 1 predictor Figure 6.2: DAG for a regression with \\(J\\) predictors Figure 6.3: Expanded DAG representation for regression with hyperparameters included Next, we gave a general representation of how the model specification diagram could be constructed. Figure 6.4: Model specification diagram for a linear regression model "],
["stan-model-for-regression-model.html", "6.1 Stan Model for Regression Model", " 6.1 Stan Model for Regression Model model_reg &lt;- &#39; data { int N; real x1[N]; real x2[N]; real y[N]; } parameters { real beta[3]; real&lt;lower=0&gt; tau; } transformed parameters { real&lt;lower=0&gt; sigma; sigma = 1/sqrt(tau); } model { for(i in 1:N){ y[i] ~ normal(beta[1] + beta[2]*x1[i] + beta[3]*x2[i], sigma); } beta ~ normal(0, 100); tau ~ gamma(1, 1); } generated quantities { real varerror; real vary; real Rsquared; real error[N]; for(i in 1:N){ error[i] = y[i] - (beta[1] + beta[2]*x1[i] + beta[3]*x2[i]); } varerror = variance(error); vary = variance(y); Rsquared = 1 - (varerror/vary); } &#39; # data must be in a list dat &lt;- read.table(&quot;data/Chp4_Reg_Chapter_Tests.dat&quot;, header=T) mydata &lt;- list( N=nrow(dat), x1=dat$Ch1Test, x2=dat$Ch2Test, y =dat$Ch3Test ) # start values start_values &lt;- function(){ list(sigma=1, beta=c(0,0,0)) } # Next, need to fit the model # I have explicited outlined some common parameters fit &lt;- stan( model_code = model_reg, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 4, # number of Markov chains warmup = 1000, # number of warm up iterations per chain iter = 5000, # total number of iterations per chain cores = 4, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;-E&#39; not ## found # first get a basic breakdown of the posteriors print(fit) ## Inference for Stan model: 66db47b16bda4d720cafb6a9769da243. ## 4 chains, each with iter=5000; warmup=1000; thin=1; ## post-warmup draws per chain=4000, total post-warmup draws=16000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## beta[1] -2.53 0.02 1.92 -6.31 -3.79 -2.51 -1.26 1.23 6902 1 ## beta[2] 0.66 0.00 0.17 0.33 0.55 0.66 0.77 0.99 6171 1 ## beta[3] 0.38 0.00 0.10 0.18 0.31 0.38 0.45 0.59 8164 1 ## tau 0.28 0.00 0.06 0.18 0.24 0.28 0.32 0.41 8776 1 ## sigma 1.91 0.00 0.20 1.57 1.77 1.89 2.03 2.36 8279 1 ## varerror 3.66 0.00 0.16 3.51 3.54 3.61 3.71 4.09 4951 1 ## vary 8.79 0.00 0.00 8.79 8.79 8.79 8.79 8.79 2 1 ## Rsquared 0.58 0.00 0.02 0.53 0.58 0.59 0.60 0.60 4951 1 ## error[1] -0.25 0.02 1.40 -2.97 -1.16 -0.26 0.66 2.52 7141 1 ## error[2] 1.72 0.01 0.50 0.74 1.38 1.72 2.04 2.70 7445 1 ## error[3] -1.05 0.01 0.56 -2.15 -1.43 -1.05 -0.67 0.05 6866 1 ## error[4] -3.20 0.01 0.76 -4.70 -3.70 -3.20 -2.68 -1.72 6827 1 ## error[5] -2.80 0.01 0.52 -3.82 -3.14 -2.80 -2.45 -1.76 9994 1 ## error[6] 0.44 0.00 0.41 -0.37 0.17 0.44 0.72 1.26 9692 1 ## error[7] -1.94 0.00 0.39 -2.71 -2.20 -1.94 -1.68 -1.16 9036 1 ## error[8] -6.22 0.00 0.39 -6.98 -6.47 -6.22 -5.96 -5.45 11261 1 ## error[9] 3.40 0.00 0.34 2.74 3.18 3.40 3.63 4.07 11991 1 ## error[10] 4.02 0.00 0.31 3.41 3.81 4.02 4.23 4.63 11859 1 ## error[11] -0.75 0.00 0.35 -1.44 -0.98 -0.74 -0.51 -0.05 9382 1 ## error[12] 0.49 0.01 0.49 -0.47 0.16 0.49 0.82 1.44 8248 1 ## error[13] 2.49 0.01 0.49 1.53 2.16 2.49 2.82 3.44 8248 1 ## error[14] -0.73 0.01 0.70 -2.10 -1.19 -0.74 -0.26 0.67 8894 1 ## error[15] 0.36 0.00 0.30 -0.22 0.16 0.36 0.56 0.95 13643 1 ## error[16] 0.36 0.00 0.30 -0.22 0.16 0.36 0.56 0.95 13643 1 ## error[17] 0.98 0.00 0.27 0.45 0.79 0.98 1.16 1.52 15655 1 ## error[18] 1.98 0.00 0.27 1.45 1.79 1.98 2.16 2.52 15655 1 ## error[19] -0.40 0.00 0.28 -0.95 -0.59 -0.40 -0.21 0.15 14629 1 ## error[20] 1.60 0.00 0.28 1.05 1.41 1.60 1.79 2.15 14629 1 ## error[21] 1.22 0.00 0.33 0.58 1.00 1.22 1.44 1.84 12204 1 ## error[22] 2.22 0.00 0.33 1.58 2.00 2.22 2.44 2.84 12204 1 ## error[23] 0.83 0.00 0.39 0.06 0.57 0.83 1.09 1.60 10573 1 ## error[24] 0.83 0.00 0.39 0.06 0.57 0.83 1.09 1.60 10573 1 ## error[25] 3.00 0.01 0.90 1.23 2.40 2.99 3.59 4.78 8173 1 ## error[26] -1.38 0.01 0.80 -2.96 -1.92 -1.39 -0.86 0.21 8234 1 ## error[27] -0.91 0.00 0.44 -1.78 -1.21 -0.91 -0.62 -0.03 9291 1 ## error[28] 0.09 0.00 0.44 -0.78 -0.21 0.09 0.38 0.97 9291 1 ## error[29] 2.09 0.00 0.44 1.22 1.79 2.09 2.38 2.97 9291 1 ## error[30] -1.68 0.00 0.32 -2.31 -1.89 -1.68 -1.46 -1.05 11895 1 ## error[31] -0.68 0.00 0.32 -1.31 -0.89 -0.68 -0.46 -0.05 11895 1 ## error[32] -0.06 0.00 0.30 -0.64 -0.26 -0.06 0.14 0.52 13836 1 ## error[33] 0.94 0.00 0.30 0.36 0.74 0.94 1.14 1.52 13836 1 ## error[34] 1.94 0.00 0.30 1.36 1.74 1.94 2.14 2.52 13836 1 ## error[35] -1.44 0.00 0.31 -2.05 -1.65 -1.44 -1.23 -0.84 14248 1 ## error[36] -0.44 0.00 0.31 -1.05 -0.65 -0.44 -0.23 0.16 14248 1 ## error[37] 1.56 0.00 0.31 0.95 1.35 1.56 1.77 2.16 14248 1 ## error[38] 0.18 0.00 0.35 -0.52 -0.06 0.18 0.41 0.87 12929 1 ## error[39] 1.18 0.00 0.35 0.48 0.94 1.18 1.41 1.87 12929 1 ## error[40] -0.21 0.00 0.42 -1.03 -0.48 -0.21 0.08 0.61 11551 1 ## error[41] -1.33 0.00 0.43 -2.18 -1.62 -1.33 -1.04 -0.48 8764 1 ## error[42] 0.90 0.00 0.37 0.16 0.65 0.90 1.15 1.63 10648 1 ## error[43] -3.48 0.00 0.38 -4.24 -3.74 -3.48 -3.22 -2.73 11458 1 ## error[44] -2.48 0.00 0.38 -3.24 -2.74 -2.48 -2.22 -1.73 11458 1 ## error[45] -1.86 0.00 0.42 -2.69 -2.14 -1.86 -1.58 -1.03 11576 1 ## error[46] -0.86 0.00 0.42 -1.69 -1.14 -0.86 -0.58 -0.03 11576 1 ## error[47] -0.86 0.00 0.42 -1.69 -1.14 -0.86 -0.58 -0.03 11576 1 ## error[48] 0.14 0.00 0.42 -0.69 -0.14 0.14 0.42 0.97 11576 1 ## error[49] 0.14 0.00 0.42 -0.69 -0.14 0.14 0.42 0.97 11576 1 ## error[50] 0.14 0.00 0.42 -0.69 -0.14 0.14 0.42 0.97 11576 1 ## lp__ -59.45 0.02 1.48 -63.21 -60.18 -59.11 -58.34 -57.62 5192 1 ## ## Samples were drawn using NUTS(diag_e) at Fri Oct 02 12:01:32 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit) ## &#39;pars&#39; not specified. Showing first 10 parameters by default. ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot(fit, pars = c(&quot;beta&quot;, &quot;sigma&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion p1 &lt;- ggs_grb(ggs(fit, family = &quot;beta&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p2 &lt;- ggs_grb(ggs(fit, family = &quot;sigma&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p1 + p2 # autocorrelation p1 &lt;- ggs_autocorrelation(ggs(fit, family=&quot;beta&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p2 &lt;- ggs_autocorrelation(ggs(fit, family=&quot;sigma&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p1 + p2 # plot the posterior density plot.data &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;beta[1]&quot;, &quot;beta[2]&quot;, &quot;beta[3]&quot;, &quot;sigma&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(&quot;Rsquared&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE # Expanded Posterior Plot fit.lm &lt;- summary(lm(Ch3Test ~ 1 + Ch1Test + Ch2Test, data=dat)) MLE &lt;- c(fit.lm$coefficients[,1], fit.lm$sigma**2, fit.lm$r.squared) prior_beta &lt;- function(x){dnorm(x, 0, 1000)} x.beta &lt;- seq(-10, 4.99, 0.01) prior.beta &lt;- data.frame(beta=x.beta, dens.beta = prior_beta(x.beta)) prior_sig &lt;- function(x){dgamma(x, 1, 1)} x.sig &lt;- seq(0.01, 2.5, 0.01) prior.sig &lt;- data.frame(sig=x.sig, dens.sig = prior_sig(x.sig)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; plot.data &lt;- as.data.frame(plot.data) p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`beta[1]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.beta, aes(x=beta, y=dens.beta, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`beta[2]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.beta, aes(x=beta, y=dens.beta, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0, 1))+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`beta[3]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.beta, aes(x=beta, y=dens.beta, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[3], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0, 1))+ theme_bw()+ theme(panel.grid = element_blank()) p4 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=sigma, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sig, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[4], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p5 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=Rsquared, color=&quot;Posterior&quot;))+ geom_vline(aes(xintercept=MLE[5], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0, 1))+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + p4 + p5 + plot_layout(guides=&quot;collect&quot;) ## Warning: Removed 328 rows containing non-finite values (stat_density). ## Warning: Removed 1399 row(s) containing missing values (geom_path). ## Warning: Removed 1 rows containing non-finite values (stat_density). ## Warning: Removed 1399 row(s) containing missing values (geom_path). "],
["jags-model-for-regression-model.html", "6.2 JAGS Model for Regression Model", " 6.2 JAGS Model for Regression Model # model code jags.model &lt;- function(){ ############################################ # Prior distributions ############################################ beta.0 ~ dnorm(0, .001) # prior for the intercept beta.1 ~ dnorm(0, .001) # prior for coefficient 1 beta.2 ~ dnorm(0, .001) # prior for coefficient 2 tau.e ~ dgamma(1, 1) # prior for the error precision sigma.e &lt;- 1/sqrt(tau.e) # standard deviation of the errors ############################################ # Conditional distribution of the data # Via a regression model ############################################ for(i in 1:n){ y.prime[i] &lt;- beta.0 + beta.1*x1[i] + beta.2*x2[i] y[i] ~ dnorm(y.prime[i], tau.e) } ############################################ # Calculate R-squared ############################################ for(i in 1:n){ error[i] &lt;- y[i] - y.prime[i] } var.error &lt;- sd(error[])*sd(error[]) var.y &lt;- sd(y[])*sd(y[]) R.squared &lt;- 1 - (var.error/var.y) } # data dat &lt;- read.table(&quot;data/Chp4_Reg_Chapter_Tests.dat&quot;, header=T) mydata &lt;- list( n=nrow(dat), x1=dat$Ch1Test, x2=dat$Ch2Test, y =dat$Ch3Test ) # starting values start_values &lt;- function(){ list(&quot;tau.e&quot;=0.01, &#39;beta.0&#39;=0, &quot;beta.1&quot;=0, &quot;beta.2&quot;=0) } # vector of all parameters to save param_save &lt;- c(&quot;tau.e&quot;, &quot;beta.0&quot;, &quot;beta.1&quot;, &quot;beta.2&quot;, &quot;R.squared&quot;) # fit model fit &lt;- jags( model.file=jags.model, data=mydata, inits=start_values, parameters.to.save = param_save, n.iter=4000, n.burnin = 1000, n.chains = 4, n.thin=1, progress.bar = &quot;none&quot;) ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 50 ## Unobserved stochastic nodes: 4 ## Total graph size: 262 ## ## Initializing model print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/AppData/Local/Temp/RtmpqeqVce/modeleb01a5c9e8.txt&quot;, fit using jags, ## 4 chains, each with 4000 iterations (first 1000 discarded) ## n.sims = 12000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## R.squared 0.584 0.019 0.536 0.578 0.590 0.597 0.601 1.040 4800 ## beta.0 -2.547 1.936 -6.349 -3.824 -2.562 -1.272 1.279 1.001 12000 ## beta.1 0.659 0.166 0.331 0.547 0.660 0.768 0.984 1.001 12000 ## beta.2 0.383 0.103 0.179 0.314 0.382 0.452 0.582 1.001 12000 ## tau.e 0.282 0.057 0.183 0.242 0.278 0.317 0.405 1.001 7600 ## deviance 207.604 2.948 204.099 205.503 206.954 208.969 214.799 1.001 4800 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = var(deviance)/2) ## pD = 4.3 and DIC = 211.9 ## DIC is an estimate of expected predictive error (lower deviance is better). # extract posteriors for all chains jags.mcmc &lt;- as.mcmc(fit) R2jags::traceplot(jags.mcmc) # gelman-rubin-brook gelman.plot(jags.mcmc) # convert to single data.frame for density plot a &lt;- colnames(as.data.frame(jags.mcmc[[1]])) plot.data &lt;- data.frame(as.matrix(jags.mcmc, chains=T, iters = T)) colnames(plot.data) &lt;- c(&quot;chain&quot;, &quot;iter&quot;, a) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;beta.0&quot;, &quot;beta.1&quot;, &quot;beta.2&quot;, &quot;tau.e&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(&quot;R.squared&quot;), prob = 0.8) + plot_title # Expanded Posterior Plot fit.lm &lt;- summary(lm(Ch3Test ~ 1 + Ch1Test + Ch2Test, data=dat)) MLE &lt;- c(fit.lm$coefficients[,1], 1/fit.lm$sigma**2, fit.lm$r.squared) prior_beta &lt;- function(x){dnorm(x, 0, 1000)} x.beta &lt;- seq(-5, 4.99, 0.01) prior.beta &lt;- data.frame(beta=x.beta, dens.beta = prior_beta(x.beta)) prior_tau &lt;- function(x){dgamma(x, 1, 1)} x.tau &lt;- seq(0.01, 0.50, 0.01) prior.tau &lt;- data.frame(tau=x.tau, dens.tau = prior_tau(x.tau)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=beta.0, color=&quot;Posterior&quot;))+ geom_line(data=prior.beta, aes(x=beta, y=dens.beta, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=beta.1, color=&quot;Posterior&quot;))+ geom_line(data=prior.beta, aes(x=beta, y=dens.beta, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0, 1))+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=beta.2, color=&quot;Posterior&quot;))+ geom_line(data=prior.beta, aes(x=beta, y=dens.beta, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[3], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0, 1))+ theme_bw()+ theme(panel.grid = element_blank()) p4 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=tau.e, color=&quot;Posterior&quot;))+ geom_line(data=prior.tau, aes(x=tau, y=dens.tau, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[4], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p5 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=R.squared, color=&quot;Posterior&quot;))+ geom_vline(aes(xintercept=MLE[5], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0.5, 0.65))+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + p4 + p5 + plot_layout(guides=&quot;collect&quot;) ## Warning: Removed 226 rows containing non-finite values (stat_density). ## Warning: Removed 899 row(s) containing missing values (geom_path). ## Warning: Removed 3 rows containing non-finite values (stat_density). ## Warning: Removed 899 row(s) containing missing values (geom_path). ## Warning: Removed 52 rows containing non-finite values (stat_density). "],
["canonical-bayesian-psychometric-modeling.html", "Chapter 7 Canonical Bayesian Psychometric Modeling", " Chapter 7 Canonical Bayesian Psychometric Modeling This chapter provides an overview of the purposes that psychometric modeling serve and how a Bayesian approach can fit into this purpose. Other information was introduced such as directed acyclic graph (DAG) representations of basic models and notation for future chapters. A canonical (conventional) psychometric analysis focuses on scoring and calibration. Scoring refers to arriving at a representation for an examinee based on their performance on an assessment, and Calibration refers to arriving at a representation for the measurement model parameters (and possibly hyper-parameters). In a research or operational setting, these two core components can be the focus separately or together. When the focus is on the simultaneous assessment of measurement model parameters and person parameters, there may need to be concession made with how to conduct both. In one sense, we would like to estimate all the parameters simultaneous so that uncertainty in measurement model parameters is reflected in person parameter (ability) estimates. However, traditional psychometric analysis tends to proceed by 1) estimating the measurement model parameters only by first integrating the person parameter distribution out of the likelihood function, then 2) using the now estimated measurement model parameters as fixed quantities, we estimate the person parameters (factor scores). This process results in the uncertainty in the person parameters being decreased. One potential benefit of a Bayesian approach is that both calibration and scoring can be done simultaneously. This may not always be of interest in the current application so the traditional approach may still be done. A canonical psychometric model can be expressed as a DAG using a model similar to the path models traditionally used in SEM. We expressed two forms of a model shown in the book below. Figure 7.1: DAG for canonical psychometric modeling Figure 7.2: Expanded DAG to include measurement model parameters "],
["classical-test-theory.html", "Chapter 8 Classical Test Theory", " Chapter 8 Classical Test Theory The traditional model specification for CTT is \\[X = T + E,\\] where \\(X\\) is the observed test/measure score, \\(T\\) is the truce score we wish to make inferences about, and \\(E\\) is the error. The true scores have population mean \\(\\mu_T\\) and variance \\(\\sigma^2_T\\). The errors for any individual are expected to be 0 on average, \\(\\mathbb{E}(E_i)=0\\) with variance \\(\\sigma^2_E\\). The errors are uncorrelated with the true score in the population, that is \\[\\mathbb{COV}(T, E) = \\sigma_{TE} = \\rho_{TE}\\sigma_{T}\\sigma_E = 0.\\] Some implications associated with the CTT model are: The population mean of observed scores is the same as the true scores \\[\\mu_x = \\mu_T.\\] The observed score variance can be decomposed into \\[\\begin{align*} \\sigma^2_X &amp;= \\sigma^2_T + \\sigma^2_E + 2\\sigma_{TE}\\\\ &amp;= \\sigma^2_T + \\sigma^2_E. \\end{align*}\\] We can define the reliability in terms of the ratio of true score variance to observed score variance, that is \\[\\rho = \\frac{\\sigma^2_T}{\\sigma^2_X} = \\frac{\\sigma^2_T}{\\sigma^2_T + \\sigma^2_E}.\\] An interesting approach to deriving estimates of true scores is to flip the traditional CTT model around so that we define the true score as a function of the observed score. This uses Kelley’s formula (Kelley 1923), \\[\\begin{align*} \\hat{T}_i &amp;= \\rho x_i + (1-\\rho)\\mu_x\\\\ &amp;= \\mu_x + \\rho (x_i - \\mu_x), \\end{align*}\\] where \\(\\mu_x\\) is the mean of the observed scores and \\(\\hat{T}_i\\) is the estimated true score of individual \\(i\\). This is an interesting formula since there’s the notion about how to incorporate uncertainty into the estimation of the true score. The higher the uncertainty (lower the reliability) the less we weight the observed score and more we rely on the population mean as our estimate. This has a very Bayesian feel to is, because it’s nearly identical to how we derive the posterior mean in a conjugate normal model (see p.158). References "],
["example-1-known-measurement-model-parameters-with-1-measure.html", "8.1 Example 1 - Known measurement model parameters with 1 measure", " 8.1 Example 1 - Known measurement model parameters with 1 measure Here, we will discuss a simple CTT example where we assume that the measurement model parameters are known. This means we assume a value for \\(\\mu_t\\), \\(\\sigma^2_T\\), and \\(\\sigma^2_E\\). We would nearly always need to estimate these quantities to provide an informed decision as to what these parameters should be. This example using 3 observations (individuals) with 1 measure per individual. The DAG for this model is shown below. Figure 8.1: Simple CTT model with 1 measure and known measurement parameters With a simply model specification using normal distributions as the underly probability functions. Figure 8.2: Model specification diagram for the known parameters CTT model "],
["example-1-stan.html", "8.2 Example 1 - Stan", " 8.2 Example 1 - Stan model_ctt1 &lt;- &#39; data { int N; real x[N]; real muT; real sigmaT; real sigmaE; } parameters { real T[N]; } model { for(i in 1:N){ x[i] ~ normal(T[i], sigmaE); T[i] ~ normal(muT, sigmaT); } } &#39; # data must be in a list mydata &lt;- list( N=3, x=c(70, 80, 96), muT = 80, sigmaT = 6, #sqrt(36) sigmaE = 4 # sqrt(16) ) # Next, need to fit the model # I have explicitly outlined some common parameters fit &lt;- stan( model_code = model_ctt1, # model code to be compiled data = mydata, # my data chains = 4, # number of Markov chains warmup = 1000, # number of warm up iterations per chain iter = 5000, # total number of iterations per chain cores = 4, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = ## TRUE): &#39;-E&#39; not found # first get a basic breakdown of the posteriors print(fit) ## Inference for Stan model: f5d98d6088830a6665ad87ae5eaa93c8. ## 4 chains, each with iter=5000; warmup=1000; thin=1; ## post-warmup draws per chain=4000, total post-warmup draws=16000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## T[1] 73.08 0.03 3.31 66.58 70.85 73.07 75.30 79.52 16644 1 ## T[2] 79.98 0.03 3.32 73.53 77.76 79.96 82.23 86.43 16872 1 ## T[3] 91.06 0.03 3.28 84.59 88.88 91.05 93.25 97.57 16258 1 ## lp__ -4.90 0.01 1.21 -8.03 -5.45 -4.58 -4.01 -3.53 8251 1 ## ## Samples were drawn using NUTS(diag_e) at Thu Oct 08 16:13:28 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit) ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot(fit, pars = c(&quot;T&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion p1 &lt;- ggs_grb(ggs(fit, family = &quot;T&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p1 # autocorrelation p1 &lt;- ggs_autocorrelation(ggs(fit, family=&quot;T&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p1 # plot the posterior density plot.data &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;T[1]&quot;,&quot;T[2]&quot;,&quot;T[3]&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE # Expanded Posterior Plot MLE &lt;- mydata$x prior_t &lt;- function(x){dnorm(x, 80, 6)} x.t&lt;- seq(50.1, 100, 0.1) prior.t &lt;- data.frame(tr=x.t, dens.t = prior_t(x.t)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; plot.data &lt;- as.data.frame(plot.data) p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[1]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[2]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[3]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[3], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + plot_layout(guides=&quot;collect&quot;) "],
["example-1-jags.html", "8.3 Example 1 - JAGS", " 8.3 Example 1 - JAGS # model code jags.model.ctt1 &lt;- function(){ ############################################ # CLASSICAL TEST THEORY MODEL # WITH KNOWN HYPERPARAMETERS # TRUE SCORE MEAN, TRUE SCORE VARIANCE # ERROR VARIANCE ############################################ ############################################ # KNOWN HYPERPARAMETERS ############################################ mu.T &lt;- 80 # Mean of the true scores sigma.squared.T &lt;- 36 # Variance of the true scores sigma.squared.E &lt;- 16 # Variance of the errors tau.T &lt;- 1/sigma.squared.T # Precision of the true scores tau.E &lt;- 1/sigma.squared.E # Precision of the errors ############################################ # MODEL FOR TRUE SCORES AND OBSERVABLES ############################################ for (i in 1:n) { T[i] ~ dnorm(mu.T, tau.T) # Distribution of true scores x[i] ~ dnorm(T[i], tau.E) # Distribution of observables } } # data mydata &lt;- list( n=3, x=c(70, 80, 96) ) # starting values start_values &lt;- function(){ list(&quot;T&quot;=c(80,80,80)) } # vector of all parameters to save param_save &lt;- c(&quot;T&quot;) # fit model fit &lt;- jags( model.file=jags.model.ctt1, data=mydata, inits=start_values, parameters.to.save = param_save, n.iter=4000, n.burnin = 1000, n.chains = 4, n.thin=1, progress.bar = &quot;none&quot;) ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 3 ## Unobserved stochastic nodes: 3 ## Total graph size: 13 ## ## Initializing model print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/AppData/Local/Temp/RtmpSoNenU/model999c150077df.txt&quot;, fit using jags, ## 4 chains, each with 4000 iterations (first 1000 discarded) ## n.sims = 12000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## T[1] 73.042 3.338 66.454 70.789 73.054 75.303 79.637 1.001 6600 ## T[2] 79.964 3.334 73.438 77.701 79.932 82.230 86.546 1.001 12000 ## T[3] 91.072 3.348 84.497 88.844 91.078 93.324 97.589 1.001 8300 ## deviance 18.019 2.969 14.232 15.816 17.391 19.499 25.562 1.001 12000 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = var(deviance)/2) ## pD = 4.4 and DIC = 22.4 ## DIC is an estimate of expected predictive error (lower deviance is better). # extract posteriors for all chains jags.mcmc &lt;- as.mcmc(fit) R2jags::traceplot(jags.mcmc) # gelman-rubin-brook gelman.plot(jags.mcmc) # convert to single data.frame for density plot a &lt;- colnames(as.data.frame(jags.mcmc[[1]])) plot.data &lt;- data.frame(as.matrix(jags.mcmc, chains=T, iters = T)) colnames(plot.data) &lt;- c(&quot;chain&quot;, &quot;iter&quot;, a) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;T[1]&quot;, &quot;T[2]&quot;, &quot;T[3]&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE MLE &lt;- mydata$x prior_t &lt;- function(x){dnorm(x, 80, 6)} x.t&lt;- seq(50.1, 100, 0.1) prior.t &lt;- data.frame(tr=x.t, dens.t = prior_t(x.t)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[1]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[2]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[3]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[3], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + plot_layout(guides=&quot;collect&quot;) "],
["example-2-known-measurement-model-with-multiple-measures.html", "8.4 Example 2 - Known Measurement Model with Multiple Measures", " 8.4 Example 2 - Known Measurement Model with Multiple Measures Here, the only thing that changes from the first example is that now we have multiple observations per individual. We can think of this as if we could administer a test (or parallel tests) repeatedly without learning occuring. The DAG and model-specification change to: Figure 8.3: Simple CTT model with known measurement parameters and multiple measures Figure 8.4: Model specification diagram for the known parameters CTT model and multiple measures "],
["example-2-stan.html", "8.5 Example 2 - Stan", " 8.5 Example 2 - Stan model_ctt2 &lt;- &#39; data { int N; int J; matrix[N, J] X; real muT; real sigmaT; real sigmaE; } parameters { real T[N]; } model { for(i in 1:N){ T[i] ~ normal(muT, sigmaT); for(j in 1:J){ X[i, j] ~ normal(T[i], sigmaE); } } } &#39; # data must be in a list mydata &lt;- list( N = 10, J = 5, X = matrix( c(80, 77, 80, 73, 73, 83, 79, 78, 78, 77, 85, 77, 88, 81, 80, 76, 76, 76, 78, 67, 70, 69, 73, 71, 77, 87, 89, 92, 91, 87, 76, 75, 79, 80, 75, 86, 75, 80, 80, 82, 84, 79, 79, 77, 82, 96, 85, 91, 87, 90), ncol=5, nrow=10, byrow=T), muT = 80, sigmaT = 6, #sqrt(36) sigmaE = 4 # sqrt(16) ) # initial values start_values &lt;- function(){ list(T=c(80,80,80,80,80,80,80,80,80,80)) } # Next, need to fit the model # I have explicitly outlined some common parameters fit &lt;- stan( model_code = model_ctt2, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 4, # number of Markov chains warmup = 1000, # number of warm up iterations per chain iter = 5000, # total number of iterations per chain cores = 4, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;- ## E&#39; not found # first get a basic breakdown of the posteriors print(fit) ## Inference for Stan model: 5eefd59584a6c5be6da9aa620ec6167e. ## 4 chains, each with iter=5000; warmup=1000; thin=1; ## post-warmup draws per chain=4000, total post-warmup draws=16000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## T[1] 76.86 0.01 1.70 73.55 75.71 76.86 78.01 80.17 30336 1 ## T[2] 79.08 0.01 1.70 75.70 77.94 79.09 80.23 82.42 32641 1 ## T[3] 82.03 0.01 1.69 78.72 80.90 82.03 83.16 85.37 31404 1 ## T[4] 75.04 0.01 1.70 71.73 73.88 75.04 76.20 78.37 31201 1 ## T[5] 72.66 0.01 1.71 69.33 71.51 72.67 73.82 76.00 33449 1 ## T[6] 88.45 0.01 1.71 85.10 87.30 88.46 89.60 91.81 32116 1 ## T[7] 77.24 0.01 1.70 73.93 76.09 77.26 78.39 80.59 33790 1 ## T[8] 80.54 0.01 1.72 77.18 79.39 80.53 81.71 83.88 34588 1 ## T[9] 80.18 0.01 1.71 76.86 79.03 80.19 81.33 83.51 33476 1 ## T[10] 89.00 0.01 1.73 85.59 87.82 89.00 90.16 92.42 32931 1 ## lp__ -23.43 0.03 2.20 -28.60 -24.70 -23.11 -21.83 -20.09 7336 1 ## ## Samples were drawn using NUTS(diag_e) at Thu Oct 08 22:33:29 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit) ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot(fit, pars = c(&quot;T&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion p1 &lt;- ggs_grb(ggs(fit, family = &quot;T&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p1 # autocorrelation p1 &lt;- ggs_autocorrelation(ggs(fit, family=&quot;T&quot;)) + theme_bw() + theme(panel.grid = element_blank()) p1 # plot the posterior density plot.data &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = paste0(&quot;T[&quot;,1:10,&quot;]&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE # Expanded Posterior Plot MLE &lt;- rowMeans(mydata$X) prior_t &lt;- function(x){dnorm(x, 80, 6)} x.t&lt;- seq(50.1, 100, 0.1) prior.t &lt;- data.frame(tr=x.t, dens.t = prior_t(x.t)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; plot.data &lt;- as.data.frame(plot.data) p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[1]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[2]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[5]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[5], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p4 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[10]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[10], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + p4 + plot_layout(guides=&quot;collect&quot;) "],
["example-2-jags.html", "8.6 Example 2 - JAGS", " 8.6 Example 2 - JAGS # model code jags.model.ctt2 &lt;- function(){ ############################################ # CLASSICAL TEST THEORY # WITH KNOWN # TRUE SCORE MEAN, TRUE SCORE VARIANCE # ERROR VARIANCE ############################################ ############################################ # KNOWN HYPERPARAMETERS ############################################ mu.T &lt;- 80 # Mean of the true scores sigma.squared.T &lt;- 36 # Variance of the true scores sigma.squared.E &lt;- 16 # Variance of the errors tau.T &lt;- 1/sigma.squared.T # Precision of the true scores tau.E &lt;- 1/sigma.squared.E # Precision of the errors ############################################ # MODEL FOR TRUE SCORES AND OBSERVABLES ############################################ for (i in 1:N) { T[i] ~ dnorm(mu.T, tau.T) # Distribution of true scores for(j in 1:J){ x[i, j] ~ dnorm(T[i], tau.E) # Distribution of observables } } } # data mydata &lt;- list( N = 10, J = 5, x = matrix( c(80, 77, 80, 73, 73, 83, 79, 78, 78, 77, 85, 77, 88, 81, 80, 76, 76, 76, 78, 67, 70, 69, 73, 71, 77, 87, 89, 92, 91, 87, 76, 75, 79, 80, 75, 86, 75, 80, 80, 82, 84, 79, 79, 77, 82, 96, 85, 91, 87, 90), ncol=5, nrow=10, byrow=T) ) # starting values start_values &lt;- function(){ list(&quot;T&quot;=rep(80,10)) } # vector of all parameters to save param_save &lt;- c(&quot;T&quot;) # fit model fit &lt;- jags( model.file=jags.model.ctt2, data=mydata, inits=start_values, parameters.to.save = param_save, n.iter=4000, n.burnin = 1000, n.chains = 4, n.thin=1, progress.bar = &quot;none&quot;) ## module glm loaded ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 50 ## Unobserved stochastic nodes: 10 ## Total graph size: 68 ## ## Initializing model print(fit) ## Inference for Bugs model at &quot;C:/Users/noahp/AppData/Local/Temp/RtmpI5mSk0/model38e016423157.txt&quot;, fit using jags, ## 4 chains, each with 4000 iterations (first 1000 discarded) ## n.sims = 12000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat ## T[1] 76.879 1.722 73.558 75.726 76.863 78.018 80.280 1.001 ## T[2] 79.068 1.729 75.686 77.884 79.056 80.230 82.478 1.001 ## T[3] 82.037 1.712 78.669 80.903 82.043 83.191 85.399 1.001 ## T[4] 75.047 1.725 71.677 73.886 75.018 76.224 78.411 1.001 ## T[5] 72.631 1.728 69.260 71.462 72.636 73.790 76.066 1.001 ## T[6] 88.445 1.712 85.090 87.294 88.452 89.615 91.797 1.001 ## T[7] 77.244 1.705 73.959 76.082 77.256 78.399 80.570 1.001 ## T[8] 80.561 1.718 77.206 79.402 80.560 81.727 83.921 1.001 ## T[9] 80.196 1.706 76.860 79.051 80.177 81.361 83.578 1.001 ## T[10] 88.980 1.726 85.579 87.830 88.983 90.122 92.380 1.001 ## deviance 269.676 4.383 262.984 266.483 269.050 272.206 279.747 1.001 ## n.eff ## T[1] 6200 ## T[2] 12000 ## T[3] 9500 ## T[4] 12000 ## T[5] 12000 ## T[6] 8900 ## T[7] 12000 ## T[8] 7000 ## T[9] 12000 ## T[10] 11000 ## deviance 7200 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). ## ## DIC info (using the rule, pD = var(deviance)/2) ## pD = 9.6 and DIC = 279.3 ## DIC is an estimate of expected predictive error (lower deviance is better). # extract posteriors for all chains jags.mcmc &lt;- as.mcmc(fit) R2jags::traceplot(jags.mcmc) # gelman-rubin-brook gelman.plot(jags.mcmc) # convert to single data.frame for density plot a &lt;- colnames(as.data.frame(jags.mcmc[[1]])) plot.data &lt;- data.frame(as.matrix(jags.mcmc, chains=T, iters = T)) colnames(plot.data) &lt;- c(&quot;chain&quot;, &quot;iter&quot;, a) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(&quot;T[1]&quot;, &quot;T[2]&quot;, &quot;T[3]&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE MLE &lt;- rowMeans(mydata$X) ## Error in rowMeans(mydata$X): &#39;x&#39; must be an array of at least two dimensions prior_t &lt;- function(x){dnorm(x, 80, 6)} x.t&lt;- seq(50.1, 100, 0.1) prior.t &lt;- data.frame(tr=x.t, dens.t = prior_t(x.t)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[1]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[2]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[5]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[5], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[10]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.t, aes(x=tr, y=dens.t, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[10], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + plot_layout(guides=&quot;collect&quot;) "],
["example-3-unknown-measurement-model-with-multiple-measures.html", "8.7 Example 3 - Unknown Measurement Model with Multiple Measures", " 8.7 Example 3 - Unknown Measurement Model with Multiple Measures Here, we finally get to the (more) realistic case when we don’t have as much prior knowledge about the measurement model parameters (namely, variances). The structure relies on hierarchically specifying priors to induce conditional independence. The DAG and model-specification change to: Figure 8.5: Simple CTT model with unknown measurement parameters Figure 8.6: Model specification diagram for the unknown measurement model parameters "],
["example-3-stan.html", "8.8 Example 3 - Stan", " 8.8 Example 3 - Stan model_ctt3 &lt;- &#39; data { int N; int J; matrix[N, J] X; } parameters { real T[N]; real muT; real&lt;lower=0&gt; sigmaT; real&lt;lower=0&gt; sigmaE; } model { for(i in 1:N){ T[i] ~ normal(muT, sigmaT); for(j in 1:J){ X[i, j] ~ normal(T[i], sigmaE); } } muT ~ normal(80, 10); sigmaT ~ inv_gamma(1, 6); sigmaE ~ inv_gamma(1, 4); } generated quantities { real rho; real rhocomp; rho = square(sigmaT)/(square(sigmaT) + square(sigmaE)); rhocomp = J*rho/((J-1)*rho + 1); } &#39; # data must be in a list mydata &lt;- list( N = 10, J = 5, X = matrix( c(80, 77, 80, 73, 73, 83, 79, 78, 78, 77, 85, 77, 88, 81, 80, 76, 76, 76, 78, 67, 70, 69, 73, 71, 77, 87, 89, 92, 91, 87, 76, 75, 79, 80, 75, 86, 75, 80, 80, 82, 84, 79, 79, 77, 82, 96, 85, 91, 87, 90), ncol=5, nrow=10, byrow=T) ) # initial values start_values &lt;- function(){ list(T=c(80,80,80,80,80,80,80,80,80,80), muT=80, sigmaT=10, sigmaE=5) } # Next, need to fit the model # I have explicitly outlined some common parameters fit &lt;- stan( model_code = model_ctt3, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 4, # number of Markov chains warmup = 1000, # number of warm up iterations per chain iter = 5000, # total number of iterations per chain cores = 4, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = ## TRUE): &#39;-E&#39; not found # first get a basic breakdown of the posteriors print(fit) ## Inference for Stan model: 8af61d5f99903650a9f4417c76fd9a69. ## 4 chains, each with iter=5000; warmup=1000; thin=1; ## post-warmup draws per chain=4000, total post-warmup draws=16000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff ## T[1] 76.87 0.01 1.53 73.83 75.86 76.86 77.89 79.87 25380 ## T[2] 79.09 0.01 1.50 76.11 78.10 79.09 80.06 82.10 24237 ## T[3] 82.05 0.01 1.52 79.06 81.03 82.04 83.05 85.06 28492 ## T[4] 75.01 0.01 1.53 72.03 73.97 75.00 76.03 78.06 24495 ## T[5] 72.61 0.01 1.57 69.59 71.56 72.59 73.64 75.74 24414 ## T[6] 88.52 0.01 1.56 85.42 87.48 88.54 89.56 91.57 26001 ## T[7] 77.23 0.01 1.53 74.25 76.22 77.21 78.26 80.27 26809 ## T[8] 80.58 0.01 1.53 77.56 79.56 80.58 81.58 83.57 22718 ## T[9] 80.21 0.01 1.52 77.20 79.21 80.22 81.20 83.20 23342 ## T[10] 89.08 0.01 1.56 86.02 88.05 89.08 90.12 92.16 23874 ## muT 80.13 0.01 2.00 76.18 78.86 80.11 81.37 84.21 18410 ## sigmaT 6.04 0.01 1.64 3.69 4.89 5.75 6.85 9.99 14480 ## sigmaE 3.50 0.00 0.40 2.82 3.22 3.47 3.74 4.39 15413 ## rho 0.72 0.00 0.11 0.50 0.66 0.74 0.80 0.90 16383 ## rhocomp 0.93 0.00 0.04 0.83 0.91 0.93 0.95 0.98 16056 ## lp__ -115.11 0.04 2.87 -121.66 -116.77 -114.73 -113.05 -110.63 6043 ## Rhat ## T[1] 1 ## T[2] 1 ## T[3] 1 ## T[4] 1 ## T[5] 1 ## T[6] 1 ## T[7] 1 ## T[8] 1 ## T[9] 1 ## T[10] 1 ## muT 1 ## sigmaT 1 ## sigmaE 1 ## rho 1 ## rhocomp 1 ## lp__ 1 ## ## Samples were drawn using NUTS(diag_e) at Thu Oct 08 23:51:12 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit) ## &#39;pars&#39; not specified. Showing first 10 parameters by default. ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot(fit, pars = c(&quot;T&quot;, &quot;muT&quot;, &quot;sigmaT&quot;, &quot;sigmaE&quot;, &quot;rho&quot;, &quot;rhocomp&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion p1 &lt;- ggs_grb(ggs(fit)) + theme_bw() + theme(panel.grid = element_blank()) p1 # autocorrelation p1 &lt;- ggs_autocorrelation(ggs(fit)) + theme_bw() + theme(panel.grid = element_blank()) p1 # plot the posterior density plot.data &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(paste0(&quot;T[&quot;,1:10,&quot;]&quot;), &quot;muT&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(&quot;sigmaT&quot;, &quot;sigmaE&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(&quot;rho&quot;, &quot;rhocomp&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE # Expanded Posterior Plot MLE &lt;- c(rowMeans(mydata$X), mean(mydata$X)) prior_mu &lt;- function(x){dnorm(x, 80, 10)} x.mu&lt;- seq(50.1, 100, 0.1) prior.mu &lt;- data.frame(mu=x.mu, dens.mu = prior_mu(x.mu)) prior_sigt &lt;- function(x){dinvgamma(x, 1, 6)} x.sigt&lt;- seq(.1, 15, 0.1) prior.sigt &lt;- data.frame(sigt=x.sigt, dens.sigt = prior_sigt(x.sigt)) prior_sige &lt;- function(x){dinvgamma(x, 1, 4)} x.sige&lt;- seq(.1, 10, 0.1) prior.sige &lt;- data.frame(sige=x.sige, dens.sige = prior_sige(x.sige)) prior_t &lt;- function(x){ mu &lt;- rnorm(1, 80, 10) sig &lt;- rinvgamma(1, 1, 4) rnorm(x, mu, sig) } x.t&lt;- seq(50.1, 100, 0.1) prior.t &lt;- data.frame(tr=prior_t(10000)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; plot.data &lt;- as.data.frame(plot.data) p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[1]`, color=&quot;Posterior&quot;))+ geom_density(data=prior.t,aes(x=tr,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[5]`, color=&quot;Posterior&quot;))+ geom_density(data=prior.t,aes(x=tr,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[5], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[10]`, color=&quot;Posterior&quot;))+ geom_density(data=prior.t,aes(x=tr,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[10], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p4 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`muT`, color=&quot;Posterior&quot;))+ geom_line(data=prior.mu,aes(x=mu,y=dens.mu,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[11], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p5 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`sigmaT`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sigt,aes(x=sigt,y=dens.sigt,color=&quot;Prior&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p6 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`sigmaE`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sige,aes(x=sige,y=dens.sige,color=&quot;Prior&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + p4 + p5 + p6 + plot_layout(ncol=3, guides=&quot;collect&quot;) "],
["example-3-jags.html", "8.9 Example 3 - JAGS", " 8.9 Example 3 - JAGS # model code jags.model.ctt3 &lt;- function(){ ############################################ # CLASSICAL TEST THEORY MODEL # WITH UnkNOWN HYPERPARAMETERS # TRUE SCORE MEAN, TRUE SCORE VARIANCE # ERROR VARIANCE ############################################ ############################################ # PRIOR DISTRIBUTIONS FOR HYPERPARAMETERS ############################################ muT ~ dnorm(80,.01) # Mean of the true scores tau.T ~ dgamma(1, 36) # Precision of the true scores tau.E ~ dgamma(1, 16) # Precision of the errors sigma.squared.T &lt;- 1/tau.T # Variance of the true scores sigma.squared.E &lt;- 1/tau.E # Variance of the errors # get SD for summarizing sigmaT &lt;- pow(sigma.squared.T, 0.5) sigmaE &lt;- pow(sigma.squared.E, 0.5) ############################################ # MODEL FOR TRUE SCORES AND OBSERVABLES ############################################ for (i in 1:N) { T[i] ~ dnorm(muT, tau.T) # Distribution of true scores for(j in 1:J){ X[i,j] ~ dnorm(T[i], tau.E) # Distribution of observables } } ############################################ # RELIABILITY ############################################ rho &lt;- sigma.squared.T/(sigma.squared.T+sigma.squared.E) rhocomp &lt;- J*rho/((J-1)*rho+1) } # data mydata &lt;- list( N = 10, J = 5, X = matrix( c(80, 77, 80, 73, 73, 83, 79, 78, 78, 77, 85, 77, 88, 81, 80, 76, 76, 76, 78, 67, 70, 69, 73, 71, 77, 87, 89, 92, 91, 87, 76, 75, 79, 80, 75, 86, 75, 80, 80, 82, 84, 79, 79, 77, 82, 96, 85, 91, 87, 90), ncol=5, nrow=10, byrow=T) ) # initial values start_values &lt;- list( list(&quot;T&quot;=c(60,85,80,95,74,69,91,82,87,78), &quot;muT&quot;=80, &quot;tau.E&quot;=0.06, &quot;tau.T&quot;=0.023), list(&quot;T&quot;=c(63, 79, 74, 104, 80, 71, 95, 72, 80, 82), &quot;muT&quot;=100, &quot;tau.E&quot;=0.09, &quot;tau.T&quot;=0.05), list(&quot;T&quot;=c(59, 86, 88, 89, 76, 65, 94, 72, 95, 84), &quot;muT&quot;=70, &quot;tau.E&quot;=0.03, &quot;tau.T&quot;=0.001), list(&quot;T&quot;=c(60, 87, 90, 91, 77, 74, 95, 76, 83, 87), &quot;muT&quot;=90, &quot;tau.E&quot;=0.01, &quot;tau.T&quot;=0.1) ) # vector of all parameters to save param_save &lt;- c(&quot;T&quot;,&quot;muT&quot;,&quot;sigmaT&quot;,&quot;sigmaE&quot;, &quot;rho&quot;, &quot;rhocomp&quot;) # fit model fit &lt;- jags( model.file=jags.model.ctt2, data=mydata, inits=start_values, parameters.to.save = param_save, n.iter=4000, n.burnin = 1000, n.chains = 4, n.thin=1, progress.bar = &quot;none&quot;) ## module glm loaded ## Warning in jags.model(model.file, data = data, inits = init.values, ## n.chains = n.chains, : Unused variable &quot;X&quot; in data ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 0 ## Unobserved stochastic nodes: 60 ## Total graph size: 68 ## ## Deleting model ## Error in setParameters(init.values[[i]], i): Error in node tau.E ## Cannot set value of non-variable node print(fit) ## Inference for Stan model: 8af61d5f99903650a9f4417c76fd9a69. ## 4 chains, each with iter=5000; warmup=1000; thin=1; ## post-warmup draws per chain=4000, total post-warmup draws=16000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff ## T[1] 76.87 0.01 1.53 73.83 75.86 76.86 77.89 79.87 25380 ## T[2] 79.09 0.01 1.50 76.11 78.10 79.09 80.06 82.10 24237 ## T[3] 82.05 0.01 1.52 79.06 81.03 82.04 83.05 85.06 28492 ## T[4] 75.01 0.01 1.53 72.03 73.97 75.00 76.03 78.06 24495 ## T[5] 72.61 0.01 1.57 69.59 71.56 72.59 73.64 75.74 24414 ## T[6] 88.52 0.01 1.56 85.42 87.48 88.54 89.56 91.57 26001 ## T[7] 77.23 0.01 1.53 74.25 76.22 77.21 78.26 80.27 26809 ## T[8] 80.58 0.01 1.53 77.56 79.56 80.58 81.58 83.57 22718 ## T[9] 80.21 0.01 1.52 77.20 79.21 80.22 81.20 83.20 23342 ## T[10] 89.08 0.01 1.56 86.02 88.05 89.08 90.12 92.16 23874 ## muT 80.13 0.01 2.00 76.18 78.86 80.11 81.37 84.21 18410 ## sigmaT 6.04 0.01 1.64 3.69 4.89 5.75 6.85 9.99 14480 ## sigmaE 3.50 0.00 0.40 2.82 3.22 3.47 3.74 4.39 15413 ## rho 0.72 0.00 0.11 0.50 0.66 0.74 0.80 0.90 16383 ## rhocomp 0.93 0.00 0.04 0.83 0.91 0.93 0.95 0.98 16056 ## lp__ -115.11 0.04 2.87 -121.66 -116.77 -114.73 -113.05 -110.63 6043 ## Rhat ## T[1] 1 ## T[2] 1 ## T[3] 1 ## T[4] 1 ## T[5] 1 ## T[6] 1 ## T[7] 1 ## T[8] 1 ## T[9] 1 ## T[10] 1 ## muT 1 ## sigmaT 1 ## sigmaE 1 ## rho 1 ## rhocomp 1 ## lp__ 1 ## ## Samples were drawn using NUTS(diag_e) at Thu Oct 08 23:51:12 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # extract posteriors for all chains jags.mcmc &lt;- as.mcmc(fit) R2jags::traceplot(jags.mcmc) ## Error in xy.coords(x, y, xlabel, ylabel, log = log, recycle = TRUE): &#39;list&#39; object cannot be coerced to type &#39;double&#39; # gelman-rubin-brook gelman.plot(jags.mcmc) ## Error in gelman.preplot(x, bin.width = bin.width, max.bins = max.bins, : Insufficient iterations to produce Gelman-Rubin plot # convert to single data.frame for density plot a &lt;- colnames(as.data.frame(jags.mcmc[[1]])) ## Error in jags.mcmc[[1]]: this S4 class is not subsettable plot.data &lt;- data.frame(as.matrix(jags.mcmc, chains=T, iters = T)) ## Error in y[, var.cols] &lt;- x: number of items to replace is not a multiple of replacement length colnames(plot.data) &lt;- c(&quot;chain&quot;, &quot;iter&quot;, a) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(paste0(&quot;T[&quot;,1:10,&quot;]&quot;), &quot;muT&quot;), prob = 0.8) + plot_title ## Error in x[, j, ] &lt;- a[chain == j, , drop = FALSE]: replacement has length zero mcmc_areas( plot.data, pars = c(&quot;sigmaT&quot;, &quot;sigmaE&quot;), prob = 0.8) + plot_title ## Error in x[, j, ] &lt;- a[chain == j, , drop = FALSE]: replacement has length zero mcmc_areas( plot.data, pars = c(&quot;rho&quot;, &quot;rhocomp&quot;), prob = 0.8) + plot_title ## Error in x[, j, ] &lt;- a[chain == j, , drop = FALSE]: replacement has length zero # I prefer a posterior plot that includes prior and MLE MLE &lt;- c(rowMeans(mydata$X), mean(mydata$X)) prior_mu &lt;- function(x){dnorm(x, 80, 10)} x.mu&lt;- seq(50.1, 100, 0.1) prior.mu &lt;- data.frame(mu=x.mu, dens.mu = prior_mu(x.mu)) prior_sigt &lt;- function(x){dinvgamma(x, 1, 6)} x.sigt&lt;- seq(.1, 15, 0.1) prior.sigt &lt;- data.frame(sigt=x.sigt, dens.sigt = prior_sigt(x.sigt)) prior_sige &lt;- function(x){dinvgamma(x, 1, 4)} x.sige&lt;- seq(.1, 10, 0.1) prior.sige &lt;- data.frame(sige=x.sige, dens.sige = prior_sige(x.sige)) prior_t &lt;- function(x){ mu &lt;- rnorm(1, 80, 10) sig &lt;- rinvgamma(1, 1, 4) rnorm(x, mu, sig) } x.t&lt;- seq(50.1, 100, 0.1) prior.t &lt;- data.frame(tr=prior_t(10000)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[1]`, color=&quot;Posterior&quot;))+ geom_density(data=prior.t,aes(x=tr,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[5]`, color=&quot;Posterior&quot;))+ geom_density(data=prior.t,aes(x=tr,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[5], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`T[10]`, color=&quot;Posterior&quot;))+ geom_density(data=prior.t,aes(x=tr,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[10], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p4 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`muT`, color=&quot;Posterior&quot;))+ geom_line(data=prior.mu,aes(x=mu,y=dens.mu,color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[11], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p5 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`sigmaT`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sigt,aes(x=sigt,y=dens.sigt,color=&quot;Prior&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p6 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`sigmaE`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sige,aes(x=sige,y=dens.sige,color=&quot;Prior&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + p4 + p5 + p6 + plot_layout(ncol=3, guides=&quot;collect&quot;) ## Error in FUN(X[[i]], ...): object &#39;muT&#39; not found "],
["confirmatory-factor-analysis.html", "Chapter 9 Confirmatory Factor Analysis", " Chapter 9 Confirmatory Factor Analysis The full Bayesian specification of a general CFA model for all associated unknowns is as follows. This includes probability statements, notation, parameters, likelihood, priors, and hyperparameters. The observed data is defined as the \\(n\\times J\\) matrix \\(\\mathbf{X}\\) for the \\(J\\) observed measures. The CFA model parameters are defined as \\[\\begin{align*} \\mathbf{x}_i &amp;= \\tau + \\Lambda\\xi_i + \\varepsilon_i\\\\ \\Sigma (\\mathbf{x}) &amp;= \\Lambda\\Phi\\Lambda^{\\prime} + \\Psi \\end{align*}\\] \\(\\Xi\\) is the \\(n\\times M\\) matrix of latent variable scores on the \\(M\\) latent variables for the \\(n\\) respondents/subjects. For an single subject, \\(\\xi_i\\) represents the vector of scores on the latent variable(s). Values (location, scale, orientation, etc.) or \\(\\xi_i\\) are conditional on (1) \\(\\kappa\\), the \\(M\\times 1\\) vector of latent variable means, and (2) \\(\\Phi\\), the \\(M\\times M\\) covariance matrix of variable variables; \\(\\tau\\) is the \\(J\\times 1\\) vector of observed variable intercepts which is the expected value for the observed measures when the latent variable(s) are all \\(0\\); \\(\\Lambda\\) is the \\(J\\times M\\) matrix of factor loadings where the \\(j\\)th row and \\(m\\)th column represents the factor loading of the \\(j\\)th observed variable on the \\(m\\)th latent variable; \\(\\delta_i\\) is the \\(J\\times 1\\) vector of errors, where \\(E(\\delta_i)=\\mathbf{0}\\) with \\(\\mathrm{var}(\\delta_i)=\\Psi\\) which is the \\(J\\times J\\) error covariance matrix. \\[\\begin{align*} p(\\Xi, \\kappa, \\Phi, \\tau, \\Lambda, \\Psi\\mid \\mathbf{X}) &amp;\\propto p(\\mathbf{X}\\mid\\Xi, \\kappa, \\Phi, \\tau, \\Lambda, \\Psi)p(\\Xi, \\kappa, \\Phi, \\tau, \\Lambda, \\Psi)\\\\ &amp;= p(\\mathbf{X}\\mid\\Xi, \\kappa, \\Phi, \\tau, \\Lambda, \\Psi) p(\\Xi\\mid\\kappa, \\Phi) p(\\kappa) p(\\Phi) p(\\tau) p(\\Lambda) p(\\Psi)\\\\ &amp;= \\prod_{i=1}^{n}\\prod_{j=1}^J\\prod_{m=1}^M p(x_{ij}\\mid\\xi_i, \\tau_j,\\lambda_j, \\psi_{jj}) p(\\xi_i\\mid\\kappa, \\Phi) p(\\kappa_m) p(\\Phi) p(\\tau_j) p(\\lambda_j) p(\\psi_{jj}) \\end{align*}\\] where \\[\\begin{align*} x_{ij}\\mid\\xi_i, \\tau_j,\\lambda_j, \\psi_{jj} &amp;\\sim \\mathrm{Normal}(\\tau_j+\\xi_i\\lambda^{\\prime}_j, \\psi_{jj}),\\ \\mathrm{for}\\ i=1, \\cdots, n,\\ j = 1, \\cdots, J;\\\\ \\xi_i\\mid\\kappa, \\Phi &amp;\\sim \\mathrm{Normal}(\\kappa, \\Phi),\\ \\mathrm{for}\\ i=1, \\cdots, n;\\\\ \\kappa_m &amp;\\sim \\mathrm{Normal}(\\mu_{\\kappa},\\sigma^2_{\\kappa}),\\ \\mathrm{for}\\ m = 1, \\cdots, M;\\\\ \\Phi &amp;\\sim \\mathrm{Inverse-Wishart}(\\Phi_0, d);\\\\ \\tau_j &amp;\\sim \\mathrm{Normal}(\\mu_{\\tau},\\sigma^2_{\\tau}),\\ \\mathrm{for}\\ j = 1, \\cdots, J;\\\\ \\lambda_{j,m} &amp;\\sim \\mathrm{Normal}(\\mu_{\\lambda}, \\sigma^2_{\\lambda}),\\ \\mathrm{for}\\ j = 1, \\cdots, J,\\ m = 1, \\cdots, M;\\\\ \\psi_{jj} &amp;\\sim \\mathrm{Inverse-Gamma}(\\nu_{\\psi}/2, \\nu_{\\psi}\\psi_0/2),\\ \\mathrm{for}\\ j=1, \\cdots, J. \\end{align*}\\] With the hyperparameters that are supplied by the analyst being defined as \\(\\mu_{\\kappa}\\) is the prior mean for the latent variable, \\(\\sigma^2_{\\kappa}\\) is the prior variance for the latent variable, \\(\\Phi_0\\) is the prior expectation for the covariance matrix among latent variables, \\(d\\) represents a dispersion parameter reflecting the magnitude of our beliefs about \\(\\Phi_0\\), \\(\\mu_{\\tau}\\) is the prior mean for the intercepts which reflects our knowledge about the location of the observed variables, \\(\\sigma^2_{\\tau}\\) is a measure of how much weight we want to give to the prior mean, \\(\\mu_{\\lambda}\\) is the prior mean for the factor loadings which can vary over items and latent variables, \\(\\sigma^2_{\\lambda}\\) is the measure of dispersion for the the factor loadings, where lower variances indicate a stronger belief about the values for the loadings, \\(\\nu_{\\psi}\\) is the measure of location for the gamma prior indicating our expectation for the magnitude of the error variance, \\(\\psi_0\\) is our uncertainty with respect to the location we selected for the variance, and Alternatively, we could place a prior on \\(\\Psi\\) instead of the individual residual variances. This would mean we would be placing a prior on the error-covariance matrix similar to how we specified a prior for latent variance covariance matrix. "],
["single-latent-variable-model.html", "9.1 Single Latent Variable Model", " 9.1 Single Latent Variable Model Here we consider the model in section 9.3 which is a CFA model with 1 latent variable and 5 observed indicators. The graphical representation of these factor models get pretty complex pretty quickly, but for this example I have reproduced a version of Figure 9.3b, shown below. Figure 9.1: DAG for CFA model with 1 latent variable However, as the authors noted, the path diagram tradition of conveying models is also very useful in discussing and describing the model, which I give next. Figure 9.2: DAG for CFA model with 1 latent variable For completeness, I have included the model specification diagram that more concretely connects the DAG and path diagram to the assumed distributions and priors. Figure 9.3: Model specification diagram for the CFA model with 1 latent factor "],
["stan-single-latent-variable.html", "9.2 Stan - Single Latent Variable", " 9.2 Stan - Single Latent Variable model_cfa1 &lt;- &#39; data { int N; int J; matrix[N, J] X; } parameters { real ksi[N]; //latent variable values real tau[J]; //intercepts real load[J-1]; //factor loadings real&lt;lower=0&gt; psi[J]; //residual variance //real kappa; // factor means real&lt;lower=0&gt; phi; // factor variances } transformed parameters { real lambda[J]; lambda[1] = 1; lambda[2:J] = load; } model { real kappa; kappa = 0; // likelihood for data for(i in 1:N){ for(j in 1:J){ X[i, j] ~ normal(tau[j] + ksi[i]*lambda[j], psi[j]); } } // prior for latent variable parameters ksi ~ normal(kappa, phi); phi ~ inv_gamma(5, 10); // prior for measurement model parameters tau ~ normal(3, 10); psi ~ inv_gamma(5, 10); for(j in 1:(J-1)){ load[j] ~ normal(1, 10); } } &#39; # data must be in a list dat &lt;- read.table(&quot;code/CFA-One-Latent-Variable/Data/IIS.dat&quot;, header=T) mydata &lt;- list( N = 500, J = 5, X = as.matrix(dat) ) # initial values start_values &lt;- list( list(tau = c(.1,.1,.1,.1,.1), lambda=c(0, 0, 0, 0, 0), phi = 1, psi=c(1, 1, 1, 1, 1)), list(tau = c(3,3,3,3,3), lambda=c(3, 3, 3, 3, 3), phi = 2, psi=c(.5, .5, .5, .5, .5)), list(tau = c(5, 5, 5, 5, 5), lambda=c(6, 6, 6, 6, 6), phi = 2, psi=c(2, 2, 2, 2, 2)) ) # Next, need to fit the model # I have explicitly outlined some common parameters fit &lt;- stan( model_code = model_cfa1, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 3, # number of Markov chains warmup = 1000, # number of warm up iterations per chain iter = 5000, # total number of iterations per chain cores = 1, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;- ## E&#39; not found # first get a basic breakdown of the posteriors print(fit,pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1]&quot;, &quot;ksi[8]&quot;)) ## Inference for Stan model: 2d84cef0cbb0e7ac36bc8c7a29bca5b9. ## 3 chains, each with iter=5000; warmup=1000; thin=1; ## post-warmup draws per chain=4000, total post-warmup draws=12000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## lambda[1] 1.00 NaN 0.00 1.00 1.00 1.00 1.00 1.00 NaN NaN ## lambda[2] 0.81 0 0.05 0.72 0.78 0.81 0.85 0.92 1331 1 ## lambda[3] 0.47 0 0.04 0.40 0.45 0.47 0.50 0.56 2208 1 ## lambda[4] 1.11 0 0.07 0.97 1.06 1.10 1.15 1.26 1659 1 ## lambda[5] 1.06 0 0.07 0.94 1.01 1.06 1.10 1.20 1364 1 ## tau[1] 3.33 0 0.04 3.26 3.31 3.33 3.36 3.41 2531 1 ## tau[2] 3.90 0 0.03 3.84 3.88 3.90 3.92 3.95 2022 1 ## tau[3] 4.60 0 0.02 4.55 4.58 4.60 4.61 4.64 3185 1 ## tau[4] 3.03 0 0.04 2.96 3.01 3.03 3.06 3.11 2349 1 ## tau[5] 3.71 0 0.04 3.64 3.69 3.71 3.74 3.78 2033 1 ## psi[1] 0.60 0 0.02 0.55 0.58 0.60 0.61 0.64 8311 1 ## psi[2] 0.36 0 0.02 0.33 0.35 0.36 0.37 0.40 4523 1 ## psi[3] 0.37 0 0.01 0.35 0.37 0.37 0.38 0.40 9997 1 ## psi[4] 0.60 0 0.02 0.56 0.59 0.60 0.62 0.65 6662 1 ## psi[5] 0.48 0 0.02 0.44 0.47 0.48 0.49 0.52 5167 1 ## phi 0.60 0 0.03 0.53 0.58 0.60 0.62 0.67 1380 1 ## ksi[1] -0.23 0 0.22 -0.67 -0.38 -0.23 -0.08 0.21 17011 1 ## ksi[8] 0.85 0 0.23 0.40 0.70 0.85 1.00 1.30 12305 1 ## ## Samples were drawn using NUTS(diag_e) at Fri Oct 16 13:08:53 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit,pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1]&quot;, &quot;ksi[8]&quot;)) ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot(fit,pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1]&quot;, &quot;ksi[8]&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion ggs_grb(ggs(fit, family = c(&quot;lambda&quot;))) + theme_bw() + theme(panel.grid = element_blank()) ## Warning: Removed 50 row(s) containing missing values (geom_path). ggs_grb(ggs(fit, family = &quot;tau&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;psi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;phi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) # autocorrelation ggs_autocorrelation(ggs(fit, family=&quot;lambda&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ## Warning in cor(X, use = &quot;pairwise.complete.obs&quot;): the standard deviation is zero ## Warning in cor(X, use = &quot;pairwise.complete.obs&quot;): the standard deviation is zero ## Warning in cor(X, use = &quot;pairwise.complete.obs&quot;): the standard deviation is zero ## Warning: Removed 150 rows containing missing values (geom_bar). ggs_autocorrelation(ggs(fit, family=&quot;tau&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;psi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;phi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) # plot the posterior density plot.data &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = paste0(&quot;lambda[&quot;,1:5,&quot;]&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = paste0(&quot;tau[&quot;,1:5,&quot;]&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(paste0(&quot;psi[&quot;,1:5,&quot;]&quot;), &quot;phi&quot;), prob = 0.8) + plot_title # I prefer a posterior plot that includes prior and MLE # Expanded Posterior Plot colnames(dat) &lt;- paste0(&quot;x&quot;,1:5) lav.mod &lt;- &#39; xi =~ 1*x1 + x2 + x3 + x4 + x5 xi ~~ xi x1 ~ 1 x2 ~ 1 x3 ~ 1 x4 ~ 1 x5 ~ 1 &#39; lav.fit &lt;- lavaan::cfa(lav.mod, data=dat) MLE &lt;- lavaan::parameterEstimates(lav.fit) prior_tau &lt;- function(x){dnorm(x, 3, 10)} x.tau&lt;- seq(1, 5, 0.01) prior.tau &lt;- data.frame(tau=x.tau, dens.mtau = prior_tau(x.tau)) prior_lambda &lt;- function(x){dnorm(x, 1, 10)} x.lambda&lt;- seq(0, 2, 0.01) prior.lambda &lt;- data.frame(lambda=x.lambda, dens.lambda = prior_lambda(x.lambda)) prior_sig &lt;- function(x){dinvgamma(x, 5, 10)} x.sig&lt;- seq(.01, 1, 0.01) prior.sig &lt;- data.frame(sig=x.sig, dens.sig = prior_sig(x.sig)) prior_sige &lt;- function(x){dinvgamma(x, 1, 4)} x.sige&lt;- seq(.1, 10, 0.1) prior.sige &lt;- data.frame(sige=x.sige, dens.sige = prior_sige(x.sige)) prior_ksi &lt;- function(x){ mu &lt;- 0 sig &lt;- rinvgamma(1, 5, 10) rnorm(x, mu, sig) } x.ksi&lt;- seq(-5, 5, 0.01) prior.ksi &lt;- data.frame(ksi=prior_ksi(10000)) cols &lt;- c(&quot;Posterior&quot;=&quot;#0072B2&quot;, &quot;Prior&quot;=&quot;#E69F00&quot;, &quot;MLE&quot;= &quot;black&quot;)#&quot;#56B4E9&quot;, &quot;#E69F00&quot; &quot;#CC79A7&quot; # get stan samples plot.data &lt;- as.data.frame(plot.data) # make plotting pieces p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`lambda[1]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.lambda, aes(x=lambda, y=dens.lambda, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[1, 4], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0.25, 1.5))+ theme_bw()+ theme(panel.grid = element_blank()) p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`lambda[2]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.lambda, aes(x=lambda, y=dens.lambda, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[2, 4], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0.25, 1.5))+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`lambda[3]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.lambda, aes(x=lambda, y=dens.lambda, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[3, 4], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0.25, 1.5))+ theme_bw()+ theme(panel.grid = element_blank()) p4 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`lambda[4]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.lambda, aes(x=lambda, y=dens.lambda, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[4, 4], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0.25, 1.5))+ theme_bw()+ theme(panel.grid = element_blank()) p5 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`lambda[5]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.lambda, aes(x=lambda, y=dens.lambda, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=MLE[5, 4], color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ lims(x=c(0.25, 1.5))+theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + p4 + p5 + plot_layout(guides=&quot;collect&quot;) ## Warning: Removed 75 row(s) containing missing values (geom_path). ## Warning: Removed 75 row(s) containing missing values (geom_path). ## Warning: Removed 75 row(s) containing missing values (geom_path). ## Warning: Removed 75 row(s) containing missing values (geom_path). ## Warning: Removed 75 row(s) containing missing values (geom_path). # phi p1 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`phi`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sig, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=sqrt(MLE[6,4]), color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) # psi p2 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`psi[1]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sig, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=sqrt(MLE[12,4]), color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p3 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`psi[2]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sig, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=sqrt(MLE[13,4]), color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p4 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`psi[3]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sig, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=sqrt(MLE[14,4]), color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p5 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`psi[4]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sig, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=sqrt(MLE[15,4]), color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p6 &lt;- ggplot()+ geom_density(data=plot.data, aes(x=`psi[5]`, color=&quot;Posterior&quot;))+ geom_line(data=prior.sig, aes(x=sig, y=dens.sig, color=&quot;Prior&quot;))+ geom_vline(aes(xintercept=sqrt(MLE[16,4]), color=&quot;MLE&quot;))+ scale_color_manual(values=cols, name=NULL)+ theme_bw()+ theme(panel.grid = element_blank()) p1 + p2 + p3 + p4 + p5 + p6 + plot_layout(guides = &quot;collect&quot;) "],
["stan-two-latent-variable.html", "9.3 Stan - Two Latent Variable", " 9.3 Stan - Two Latent Variable 9.3.1 Inverse-Wishart Prior Using Stan based on a nearly identical model structure presented in the text. model_cfa_2factor &lt;- &quot; data { int N; int J; int M; matrix[N, J] X; matrix[M, M] phi0; } parameters { matrix[M, M] phi; // latent variable covaraince matrix matrix[N, M] ksi; //latent variable values real lambda[J]; //factor loadings matrix real tau[J]; //intercepts real&lt;lower=0&gt; psi[J]; //residual variance } model { // likelihood for data for(i in 1:N){ X[i, 1] ~ normal(tau[1] + ksi[i,1]*lambda[1], psi[1]); X[i, 2] ~ normal(tau[2] + ksi[i,1]*lambda[2], psi[2]); X[i, 3] ~ normal(tau[3] + ksi[i,1]*lambda[3], psi[3]); X[i, 4] ~ normal(tau[4] + ksi[i,2]*lambda[4], psi[4]); X[i, 5] ~ normal(tau[5] + ksi[i,2]*lambda[5], psi[5]); // prior for ksi ksi[i] ~ multi_normal(rep_vector(0, M), phi); } // latent variable variance matrix phi ~ inv_wishart(2, phi0); // prior for measurement model parameters tau ~ normal(3, 10); psi ~ inv_gamma(5, 10); lambda[1] ~ normal(1, .001); lambda[2] ~ normal(1, 10); lambda[3] ~ normal(1, 10); lambda[4] ~ normal(1, .001); lambda[5] ~ normal(1, 10); } &quot; # data must be in a list dat &lt;- as.matrix(read.table(&quot;code/CFA-Two-Latent-Variables/Data/IIS.dat&quot;, header=T)) mydata &lt;- list( N = 500, J = 5, M = 2, X = dat, phi0 = matrix(c(1, .3, .3, 1), ncol=2) ) # # initial values start_values &lt;- list( list( phi= structure( .Data= c(1, 0.30, 0.30, 1), .Dim=c(2, 2)), tau = c(3, 3, 3, 3, 3), lambda= c(1, 1, 1, 1, 1), psi=c(.5, .5, .5, .5, .5) ), list( phi= structure( .Data= c(1, 0, 0, 1), .Dim=c(2, 2)), tau = c(5, 5, 5, 5, 5), lambda= c(1, .7, .7, 1, .7), psi=c(2, 2, 2, 2, 2) ), list( phi= structure( .Data= c(1, 0.10, 0.10, 1), .Dim=c(2, 2)), tau = c(1, 1, 1, 1, 1), lambda= c(1, 1.3, 1.3, 1, 1.3), psi=c(1, 1, 1, 1, 1) ) ) # Next, need to fit the model # I have explicitly outlined some common parameters fit &lt;- stan( model_code = model_cfa_2factor, # model code to be compiled data = mydata, # my data init = start_values, # starting values chains = 3, # number of Markov chains #warmup = 1000, # number of warm up iterations per chain iter = 10000, # total number of iterations per chain cores = 3, # number of cores (could use one per chain) control = list(adapt_delta = 0.9, max_treedepth = 12), refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;-E&#39; not found ## Warning: There were 14950 divergent transitions after warmup. See ## http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup ## to find out why this is a problem and how to eliminate them. ## Warning: There were 50 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 12. See ## http://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded ## Warning: Examine the pairs() plot to diagnose sampling problems ## Warning: The largest R-hat is 3.79, indicating chains have not mixed. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#r-hat ## Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#bulk-ess ## Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#tail-ess # first get a basic breakdown of the posteriors print(fit, pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1, 1]&quot;, &quot;ksi[1, 2]&quot;, &quot;ksi[8, 1]&quot;, &quot;ksi[8, 2]&quot;)) ## Inference for Stan model: 9cba7ccbea0f9cb6bfe744cf6be59b64. ## 3 chains, each with iter=10000; warmup=5000; thin=1; ## post-warmup draws per chain=5000, total post-warmup draws=15000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## lambda[1] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 2 7.23 ## lambda[2] 1.00 0.20 0.24 0.70 0.70 1.00 1.30 1.30 2 335751.68 ## lambda[3] 1.00 0.20 0.24 0.70 0.70 1.00 1.30 1.30 2 277279.09 ## lambda[4] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 2 5.87 ## lambda[5] 1.00 0.20 0.24 0.70 0.70 1.00 1.30 1.30 2 397640.53 ## tau[1] 3.00 1.33 1.63 1.00 1.00 3.00 5.00 5.00 2 1763632.95 ## tau[2] 3.00 1.33 1.63 1.00 1.00 3.00 5.00 5.00 2 2151915.04 ## tau[3] 3.00 1.33 1.63 1.00 1.00 3.00 5.00 5.00 2 2081316.86 ## tau[4] 3.00 1.33 1.63 1.00 1.00 3.00 5.00 5.00 2 1660555.71 ## tau[5] 3.00 1.33 1.63 1.00 1.00 3.00 5.00 5.00 2 1654968.94 ## psi[1] 1.17 0.51 0.62 0.50 0.50 1.00 2.00 2.00 2 486301.20 ## psi[2] 1.17 0.51 0.62 0.50 0.50 1.00 2.00 2.00 2 551224.66 ## psi[3] 1.17 0.51 0.62 0.50 0.50 1.00 2.00 2.00 2 596832.25 ## psi[4] 1.17 0.51 0.62 0.50 0.50 1.00 2.00 2.00 2 486021.86 ## psi[5] 1.17 0.51 0.62 0.50 0.50 1.00 2.00 2.00 2 279141.94 ## phi[1,1] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 2 3.58 ## phi[1,2] 0.13 0.10 0.12 0.00 0.00 0.10 0.30 0.30 2 320432.06 ## phi[2,1] 0.13 0.10 0.12 0.00 0.00 0.10 0.30 0.30 2 320528.37 ## phi[2,2] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 2 5.80 ## ksi[1,1] 0.36 0.80 0.98 -0.74 -0.74 0.17 1.64 1.64 2 1253804.87 ## ksi[1,2] 0.02 0.96 1.18 -1.65 -1.65 0.83 0.87 0.87 2 1456604.89 ## ksi[8,1] -0.60 0.93 1.13 -1.65 -1.65 -1.13 0.97 0.97 2 1536897.56 ## ksi[8,2] 1.18 0.28 0.35 0.71 0.71 1.29 1.54 1.54 2 526350.60 ## ## Samples were drawn using NUTS(diag_e) at Fri Oct 23 10:48:19 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit, pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1, 1]&quot;, &quot;ksi[1, 2]&quot;, &quot;ksi[8, 1]&quot;, &quot;ksi[8, 2]&quot;)) ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot( fit, pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1, 1]&quot;, &quot;ksi[1, 2]&quot;, &quot;ksi[8, 1]&quot;, &quot;ksi[8, 2]&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion ggs_grb(ggs(fit, family = c(&quot;lambda&quot;))) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;tau&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;psi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;phi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) # autocorrelation ggs_autocorrelation(ggs(fit, family=&quot;lambda&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;tau&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;psi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;phi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) 9.3.2 LKJ Cholesky Parameterization Because I had such massive problems with the above, I search for how people estimate CFA models in Stan. I found that most people use the LKJ Cholesky parameterization. model_cfa2 &lt;- &quot; data { int N; int J; int M; matrix[N, J] X; } parameters { cholesky_factor_corr[M] L; // Cholesky decomp of // corr mat of random slopes vector[M] A; // Vector of factor variances matrix[N, M] ksi; //latent variable values matrix[J, M] lambda; //factor loadings matrix real tau[J]; //intercepts real&lt;lower=0&gt; psi[J]; //residual variance } transformed parameters { matrix[M, M] A0; vector[M] S; A0 = diag_pre_multiply(A, L); S = sqrt(A); } model { // likelihood for data for(i in 1:N){ X[i, 1] ~ normal(tau[1] + ksi[i,1]*lambda[1], psi[1]); X[i, 2] ~ normal(tau[2] + ksi[i,1]*lambda[2], psi[2]); X[i, 3] ~ normal(tau[3] + ksi[i,1]*lambda[3], psi[3]); X[i, 4] ~ normal(tau[4] + ksi[i,2]*lambda[4], psi[4]); X[i, 5] ~ normal(tau[5] + ksi[i,2]*lambda[5], psi[5]); } // latent variable parameters A ~ inv_gamma(5, 10); L ~ lkj_corr_cholesky(M); for(i in 1:N){ ksi[i] ~ multi_normal_cholesky(rep_vector(0, M), A0); } // prior for measurement model parameters tau ~ normal(3, 10); psi ~ inv_gamma(5, 10); lambda[1] ~ normal(1, .001); lambda[2] ~ normal(1, 10); lambda[3] ~ normal(1, 10); lambda[4] ~ normal(1, .001); lambda[5] ~ normal(1, 10); } generated quantities { matrix[M, M] R; matrix[M, M] phi; R = tcrossprod(L); phi = quad_form_diag(R, S); } &quot; # data must be in a list dat &lt;- as.matrix(read.table(&quot;code/CFA-Two-Latent-Variables/Data/IIS.dat&quot;, header=T)) mydata &lt;- list( N = 500, J = 5, M = 2, X = dat ) # Next, need to fit the model # I have explicitly outlined some common parameters fit &lt;- stan( model_code = model_cfa2, # model code to be compiled data = mydata, # my data #init = init_fun, #start_values, # starting values chains = 3, # number of Markov chains #warmup = 1000, # number of warm up iterations per chain iter = 10000, # total number of iterations per chain cores = 3, # number of cores (could use one per chain) refresh = 0 # no progress shown ) ## Warning in system(paste(CXX, ARGS), ignore.stdout = TRUE, ignore.stderr = TRUE): &#39;-E&#39; not found ## Warning: The largest R-hat is NA, indicating chains have not mixed. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#r-hat ## Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#bulk-ess ## Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. ## Running the chains for more iterations may help. See ## http://mc-stan.org/misc/warnings.html#tail-ess # first get a basic breakdown of the posteriors print(fit, pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;R&quot;, &quot;A&quot;, &quot;A0&quot;, &quot;phi&quot;, &quot;ksi[1, 1]&quot;, &quot;ksi[1, 2]&quot;, &quot;ksi[8, 1]&quot;, &quot;ksi[8, 2]&quot;)) ## Inference for Stan model: d7ec6e3e5735805a9988d630376e6cbe. ## 3 chains, each with iter=10000; warmup=5000; thin=1; ## post-warmup draws per chain=5000, total post-warmup draws=15000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## lambda[1,1] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 19987 1.00 ## lambda[1,2] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 19765 1.00 ## lambda[2,1] 1.24 0.01 0.06 1.14 1.20 1.23 1.26 1.36 35 1.09 ## lambda[2,2] 1.24 0.01 0.06 1.14 1.20 1.23 1.27 1.36 35 1.09 ## lambda[3,1] 0.61 0.00 0.04 0.53 0.58 0.60 0.63 0.70 86 1.04 ## lambda[3,2] 0.61 0.00 0.04 0.53 0.58 0.60 0.63 0.70 84 1.04 ## lambda[4,1] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 12549 1.00 ## lambda[4,2] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 12992 1.00 ## lambda[5,1] 0.59 0.00 0.03 0.54 0.57 0.59 0.61 0.65 6326 1.00 ## lambda[5,2] 0.59 0.00 0.03 0.54 0.57 0.59 0.61 0.65 6279 1.00 ## tau[1] 3.32 0.00 0.03 3.27 3.30 3.32 3.34 3.37 138 1.02 ## tau[2] 3.88 0.00 0.02 3.84 3.87 3.88 3.89 3.92 50 1.05 ## tau[3] 4.59 0.00 0.01 4.56 4.58 4.59 4.60 4.62 121 1.02 ## tau[4] 3.01 0.01 0.03 2.95 2.99 3.02 3.04 3.08 9 1.38 ## tau[5] 3.70 0.01 0.03 3.64 3.68 3.70 3.72 3.75 14 1.18 ## psi[1] 0.68 0.00 0.02 0.66 0.67 0.68 0.69 0.72 6800 1.00 ## psi[2] 0.02 0.00 0.00 0.02 0.02 0.02 0.02 0.02 3024 1.00 ## psi[3] 0.36 0.00 0.01 0.34 0.35 0.36 0.37 0.38 6177 1.00 ## psi[4] 0.02 0.00 0.00 0.02 0.02 0.02 0.02 0.02 2795 1.00 ## psi[5] 0.59 0.00 0.01 0.56 0.58 0.59 0.60 0.61 6448 1.00 ## R[1,1] 1.00 NaN 0.00 1.00 1.00 1.00 1.00 1.00 NaN NaN ## R[1,2] 0.56 0.00 0.03 0.50 0.54 0.56 0.59 0.62 4965 1.00 ## R[2,1] 0.56 0.00 0.03 0.50 0.54 0.56 0.59 0.62 4965 1.00 ## R[2,2] 1.00 0.00 0.00 1.00 1.00 1.00 1.00 1.00 962 1.00 ## A[1] 0.49 0.00 0.03 0.44 0.48 0.49 0.51 0.54 55 1.05 ## A[2] 0.90 0.00 0.03 0.84 0.88 0.90 0.92 0.95 5197 1.00 ## A0[1,1] 0.49 0.00 0.03 0.44 0.48 0.49 0.51 0.54 55 1.05 ## A0[1,2] 0.00 NaN 0.00 0.00 0.00 0.00 0.00 0.00 NaN NaN ## A0[2,1] 0.51 0.00 0.04 0.43 0.48 0.51 0.53 0.58 4127 1.00 ## A0[2,2] 0.74 0.00 0.02 0.69 0.72 0.74 0.75 0.79 11160 1.00 ## phi[1,1] 0.49 0.00 0.03 0.44 0.48 0.49 0.51 0.54 55 1.05 ## phi[1,2] 0.38 0.00 0.03 0.32 0.36 0.37 0.39 0.43 607 1.00 ## phi[2,1] 0.38 0.00 0.03 0.32 0.36 0.37 0.39 0.43 607 1.00 ## phi[2,2] 0.90 0.00 0.03 0.84 0.88 0.90 0.92 0.95 5197 1.00 ## ksi[1,1] -0.41 0.00 0.02 -0.45 -0.42 -0.40 -0.39 -0.36 34 1.12 ## ksi[1,2] -0.41 0.01 0.04 -0.48 -0.44 -0.42 -0.39 -0.34 10 1.30 ## ksi[8,1] 0.91 0.01 0.05 0.80 0.88 0.91 0.94 0.99 40 1.05 ## ksi[8,2] 0.39 0.01 0.04 0.32 0.36 0.38 0.41 0.46 10 1.30 ## ## Samples were drawn using NUTS(diag_e) at Fri Oct 23 12:56:19 2020. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). # plot the posterior in a # 95% probability interval # and 80% to contrast the dispersion plot(fit,pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1, 1]&quot;, &quot;ksi[1, 2]&quot;, &quot;ksi[8, 1]&quot;, &quot;ksi[8, 2]&quot;)) ## ci_level: 0.8 (80% intervals) ## outer_level: 0.95 (95% intervals) # traceplots rstan::traceplot(fit, pars =c(&quot;lambda&quot;, &quot;tau&quot;, &quot;psi&quot;, &quot;phi&quot;, &quot;ksi[1, 1]&quot;, &quot;ksi[1, 2]&quot;, &quot;ksi[8, 1]&quot;, &quot;ksi[8, 2]&quot;), inc_warmup = TRUE) # Gelman-Rubin-Brooks Convergence Criterion ggs_grb(ggs(fit, family = c(&quot;lambda&quot;))) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;tau&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;psi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_grb(ggs(fit, family = &quot;phi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) # autocorrelation ggs_autocorrelation(ggs(fit, family=&quot;lambda&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;tau&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;psi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) ggs_autocorrelation(ggs(fit, family=&quot;phi&quot;)) + theme_bw() + theme(panel.grid = element_blank()) # plot the posterior density plot.data &lt;- as.matrix(fit) plot_title &lt;- ggtitle(&quot;Posterior distributions&quot;, &quot;with medians and 80% intervals&quot;) mcmc_areas( plot.data, pars = c(paste0(&quot;lambda[&quot;,1:5,&quot;]&quot;)), prob = 0.8) + plot_title ## Error: Some &#39;pars&#39; don&#39;t match parameter names: lambda[1], lambda[2], lambda[3], lambda[4], lambda[5] FALSE mcmc_areas( plot.data, pars = paste0(&quot;tau[&quot;,1:5,&quot;]&quot;), prob = 0.8) + plot_title mcmc_areas( plot.data, pars = c(paste0(&quot;psi[&quot;,1:5,&quot;]&quot;), &quot;phi[1,1]&quot;, &quot;phi[1,2]&quot;, &quot;phi[2,2]&quot;), prob = 0.8) + plot_title "],
["references.html", "References", " References "]
]
